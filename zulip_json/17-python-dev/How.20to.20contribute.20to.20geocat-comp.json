[
    {
        "content": "<p><span class=\"user-group-mention\" data-user-group-id=\"1\">@geocat</span>   I'm interested in adding python code that mimics the NCL functions <code>month_to_season()</code> and <code>getind_latlon2d()</code>.   I have some questions about how to do this.   Do I put these functions in separate python source files (one function per file), or a single file?   What should these files be called?   How much in the way of unit tests are you looking for, and do these go in a single file, or separate files for each function?</p>",
        "id": 6438,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1586551341
    },
    {
        "content": "<p>Are there perhaps unit tests for the original NCL functions, that could be ported over to python?</p>",
        "id": 6439,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1586551598
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1\">@geocat</span>   I'm interested in adding python code that mimics the NCL functions <code>month_to_season()</code> and <code>getind_latlon2d()</code>.   I have some questions about how to do this.   Do I put these functions in separate python source files (one function per file), or a single file?   What should these files be called?   How much in the way of unit tests are you looking for, and do these go in a single file, or separate files for each function?</p>\n</blockquote>\n<p>re: month_to_season; it should be fairly straightforward to add a custom season-start-month to our current <code>da.time.dt.season</code>. (<a href=\"https://xarray.pydata.org/en/stable/time-series.html#datetime-components\" target=\"_blank\" title=\"https://xarray.pydata.org/en/stable/time-series.html#datetime-components\">https://xarray.pydata.org/en/stable/time-series.html#datetime-components</a>) and then that could plugged into <code>da.resample</code> to build <code>month_to_season</code> or really <code>anything_to_season</code>.</p>",
        "id": 6444,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1586553340
    },
    {
        "content": "<p>So, the NCL version takes the simple mean of three months' worth of data, which some have pointed out is not the best way to compute the seasonal mean.   So I was originally thinking of duplicating this behavior, ignoring the number of days in each month.    I'm assuming this is incompatible with how xarray wants to handle this.</p>",
        "id": 6445,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1586553597
    },
    {
        "content": "<p>xarray now has <code>dt.days_in_month</code> for CFTime indexes so you can get the weights easily: <a href=\"https://github.com/pydata/xarray/pull/3935\" target=\"_blank\" title=\"https://github.com/pydata/xarray/pull/3935\">https://github.com/pydata/xarray/pull/3935</a> </p>\n<p>Also see updated example: <a href=\"https://xarray.pydata.org/en/latest/examples/monthly-means.html#Now-for-the-heavy-lifting\" target=\"_blank\" title=\"https://xarray.pydata.org/en/latest/examples/monthly-means.html#Now-for-the-heavy-lifting\">https://xarray.pydata.org/en/latest/examples/monthly-means.html#Now-for-the-heavy-lifting</a>:</p>",
        "id": 6447,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1586553918
    },
    {
        "content": "<p>yeah so <code>month_to_season</code> is just <code>da.resample(time=\"QS-Feb\").mean()</code>with syntax from <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects\" target=\"_blank\" title=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects\">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#dateoffset-objects</a>  (QS-Feb = calendar <em>Q</em>uarter, labelled with <em>S</em>tart-date and starting in <em>Feb</em></p>\n<p>Once this (<a href=\"https://github.com/pydata/xarray/issues/3937\" target=\"_blank\" title=\"https://github.com/pydata/xarray/issues/3937\">https://github.com/pydata/xarray/issues/3937</a>) is implemented</p>\n<p>it could be<br>\n<code>da.weighted(da.time.dt.days_in_month).resample(time=\"QS-Feb\").mean()</code> or other weights as appropriate.</p>",
        "id": 6455,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1586555446
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p><span class=\"user-group-mention\" data-user-group-id=\"1\">@geocat</span>   I'm interested in adding python code that mimics the NCL functions <code>month_to_season()</code> and <code>getind_latlon2d()</code>.   I have some questions about how to do this.   Do I put these functions in separate python source files (one function per file), or a single file?   What should these files be called?   How much in the way of unit tests are you looking for, and do these go in a single file, or separate files for each function?</p>\n</blockquote>\n<p>re: month_to_season; it should be fairly straightforward to add a custom season-start-month to our current <code>da.time.dt.season</code>. (<a href=\"https://xarray.pydata.org/en/stable/time-series.html#datetime-components\" target=\"_blank\" title=\"https://xarray.pydata.org/en/stable/time-series.html#datetime-components\">https://xarray.pydata.org/en/stable/time-series.html#datetime-components</a>) and then that could plugged into <code>da.resample</code> to build <code>month_to_season</code> or really <code>anything_to_season</code>.</p>\n</blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"9\">@Brian Bonnlander</span>  , thanks a lot for your interest in contributing to <strong>geocat-comp</strong>. I can have a few suggestions here:</p>\n<p>Pure Python functions are implemented within their own files each in <strong>geocat-comp</strong>. So, it would be good for you to add your functions as separate files for each, too. For an example, you can see the following pure Python function: <a href=\"https://github.com/NCAR/geocat-comp/blob/develop/src/geocat/comp/polynomial.py\" target=\"_blank\" title=\"https://github.com/NCAR/geocat-comp/blob/develop/src/geocat/comp/polynomial.py\">https://github.com/NCAR/geocat-comp/blob/develop/src/geocat/comp/polynomial.py</a>. Just FYI: We are in the beginning of a structural modification to our geocat-comp in order to separate pure Python and Fortran-dependent codes from each other as separate repo's. I believe that it shouldn't affect your current contribution as here; however, alternative thoughts would welcome from our other <span class=\"user-group-mention\" data-user-group-id=\"1\">@geocat</span> members.</p>",
        "id": 6456,
        "sender_full_name": "Orhan Eroglu",
        "timestamp": 1586555648
    },
    {
        "content": "<blockquote>\n<p>Are there perhaps unit tests for the original NCL functions, that could be ported over to python?</p>\n</blockquote>\n<p>Hey <span class=\"user-mention\" data-user-id=\"9\">@Brian Bonnlander</span> , in regards to your questions about test cases:</p>\n<p>First, you can find a bunch of test cases for several functions under here: <a href=\"https://github.com/NCAR/geocat-comp/tree/develop/test\" target=\"_blank\" title=\"https://github.com/NCAR/geocat-comp/tree/develop/test\">https://github.com/NCAR/geocat-comp/tree/develop/test</a></p>\n<p>Second, as a more precise example, you may want to have a look at this: <a href=\"https://github.com/NCAR/geocat-comp/blob/develop/test/test_linint2points.py\" target=\"_blank\" title=\"https://github.com/NCAR/geocat-comp/blob/develop/test/test_linint2points.py\">https://github.com/NCAR/geocat-comp/blob/develop/test/test_linint2points.py</a>. In this case, test cases are written for the sake of acquiring outputs identical to NCL outputs regarding not only dimensions etc. but also content. When you read throughout the code, you can see input arrays and ground-truth (or expected) output arrays. These input and output arrays are generated by running NCL scripts first then using them in these Python cases. You can see those NCL test scripts (written by us for the python test) attached here: <a href=\"/user_uploads/2/AYs01fIO0okefsy_vg_R8Zu8/test_linint2_points_msg.ncl\" target=\"_blank\" title=\"test_linint2_points_msg.ncl\">test_linint2_points_msg.ncl</a> <a href=\"/user_uploads/2/FoFLcMp_7ztVzp-q3pacypLt/test_linint2_points.ncl\" target=\"_blank\" title=\"test_linint2_points.ncl\">test_linint2_points.ncl</a></p>",
        "id": 6459,
        "sender_full_name": "Orhan Eroglu",
        "timestamp": 1586556266
    },
    {
        "content": "<p>OK, but if I want to see existing tests written in NCL for some other function I want to submit, where can I look to see if there are unit tests written in NCL for that function?  In other words, can I confirm that my python version of a function will pass the original units tests for the NCL version?</p>",
        "id": 6461,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1586556889
    },
    {
        "content": "<p>We haven't conducted any investigations with respect to the original NCL unit tests, and it is beyond my knowledge if there is a source where we can find original NCL unit tests. Any thoughts from <span class=\"user-group-mention\" data-user-group-id=\"1\">@geocat</span> team?</p>",
        "id": 6463,
        "sender_full_name": "Orhan Eroglu",
        "timestamp": 1586596791
    }
]