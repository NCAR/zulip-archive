[
    {
        "content": "<p>I'm trying to generate annual timeseries with the cumulative sum of daily runoff from the CESM2-LE.<br>\nThis must be a common task, but the code below overload memory.  Is there a more memory efficient way to try this?</p>\n<p>ds.QRUNOFF.groupby('time.year').apply(<br>\n    lambda x: x.cumsum(dim='time')).compute()</p>",
        "id": 31579,
        "sender_full_name": "Will Wieder",
        "timestamp": 1621267297
    },
    {
        "content": "<p>I also found this thread on github <span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span>,   but I can't tell if the issue has been fixed? <a href=\"https://github.com/pydata/xarray/issues/3141\" target=\"_blank\" title=\"https://github.com/pydata/xarray/issues/3141\">https://github.com/pydata/xarray/issues/3141</a></p>",
        "id": 31587,
        "sender_full_name": "Will Wieder",
        "timestamp": 1621270419
    },
    {
        "content": "<p>It's still open so it hasn't been fixed. </p>\n<p>I would do </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\"># calculate full cumsum</span>\n<span class=\"n\">cumsum</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">QRUNOFF</span><span class=\"o\">.</span><span class=\"n\">cumsum</span><span class=\"p\">(</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># may need xr.cftime_range intead</span>\n<span class=\"n\">year_start</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">date_range</span><span class=\"p\">(</span><span class=\"s2\">&quot;31-Dec-year0&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;31-Dec-year1&quot;</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># index out values at the end of each year and move them to start of the next year</span>\n<span class=\"n\">values_year_start</span> <span class=\"o\">=</span> <span class=\"n\">cumsum</span><span class=\"o\">.</span><span class=\"n\">sel</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">year_start</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;nearest&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">values_year_start</span><span class=\"p\">[</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">]</span>  <span class=\"o\">=</span> <span class=\"n\">value_year_start</span><span class=\"p\">[</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Timedelta</span><span class=\"p\">(</span><span class=\"s2\">&quot;1D&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># reindex to full time vector by forward filling</span>\n<span class=\"n\">reindexed</span> <span class=\"o\">=</span> <span class=\"n\">values_year_start</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">reindex</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">=</span><span class=\"n\">cumsum</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;ffill&quot;</span><span class=\"p\">)</span>\n<span class=\"c1\"># get result</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cumum</span> <span class=\"o\">-</span> <span class=\"n\">reindexed</span>\n</pre></div>",
        "id": 31636,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1621302721
    }
]