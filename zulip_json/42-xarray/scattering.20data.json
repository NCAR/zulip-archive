[
    {
        "content": "<p>Since the updates I've been getting this warning message quite a lot. I'm assuming it's because I'm not doing something correctly?</p>\n<div class=\"codehilite\"><pre><span></span><code>/glade/work/afoster/conda-envs/ml_analysis/lib/python3.11/site-packages/distributed/client.py:3162: UserWarning: Sending large graph of size 15.50 MiB.\nThis may cause some slowdown.\nConsider scattering data ahead of time and using futures.\n  warnings.warn(\n</code></pre></div>\n<p>For this warning, I am executing this command, which does some averaging:</p>\n<div class=\"codehilite\"><pre><span></span><code>gpp_annual = annual_mean(ds_pft.GPP)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>def annual_mean(da):\n    cf1, cf2 = cfs[da.name].values()\n\n    days_per_month = da[&#39;time.daysinmonth&#39;]\n    ann_mean = cf1*(days_per_month*da).groupby(&#39;time.year&#39;).sum().compute()\n    ann_mean.name = da.name\n    return ann_mean\n</code></pre></div>\n<p>I do have dask imported, but I guess I'm not sure how to actually \"scatter\"</p>",
        "id": 94840,
        "sender_full_name": "Adrianna Foster",
        "timestamp": 1706042225
    },
    {
        "content": "<p>okay so I removed the <code>.compute()</code> from the function and now it runs extremely quickly... I'm not sure if this is a fluke, but it does make sense I think?</p>",
        "id": 94842,
        "sender_full_name": "Adrianna Foster",
        "timestamp": 1706043852
    },
    {
        "content": "<p>though it's now just slowing down at a different location...</p>",
        "id": 94843,
        "sender_full_name": "Adrianna Foster",
        "timestamp": 1706043911
    },
    {
        "content": "<p><code>.compute()</code> is doing the computation, and I believe returning the result to the task running the notebook. If you want to do the computation, but leave the result distributed (which I think is what the warning about scattering wants you to do), you could do</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">ann_mean</span> <span class=\"o\">=</span> <span class=\"n\">cf1</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">days_per_month</span><span class=\"o\">*</span><span class=\"n\">da</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s1\">'time.year'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">persist</span><span class=\"p\">()</span>\n<span class=\"n\">wait</span><span class=\"p\">(</span><span class=\"n\">ann_mean</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>the <code>wait</code> function needs to be imported from <code>dask.distributed</code></p>",
        "id": 94844,
        "sender_full_name": "Michael Levy",
        "timestamp": 1706044109
    },
    {
        "content": "<p><code>.persist()</code> will start executing the dask task list, but it's non-blocking. The <code>wait()</code> call makes it blocking, so the function won't return until the annual mean has been computed</p>",
        "id": 94845,
        "sender_full_name": "Michael Levy",
        "timestamp": 1706044170
    },
    {
        "content": "<p>thanks!</p>",
        "id": 94846,
        "sender_full_name": "Adrianna Foster",
        "timestamp": 1706044225
    }
]