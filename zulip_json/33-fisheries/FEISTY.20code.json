[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span>, what is the status of the FEISTY code? Do you have it in a GitHub repo? It would be great to start to poke around the code and consider how best to facilitate offline applications—and begin moving toward the online model.</p>",
        "id": 17697,
        "sender_full_name": "Matt Long",
        "timestamp": 1600779414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> , I do have it on GitHub, but it is a bit of a mess. I'm too much of a git novice to utilize branches, so I keep different version in separate folders instead. The code also needs to be streamlined. Maybe the best place for you to start is this one: <a href=\"https://github.com/cpetrik/FEISTY/tree/master/CODE/clim_complete\" target=\"_blank\" title=\"https://github.com/cpetrik/FEISTY/tree/master/CODE/clim_complete\">https://github.com/cpetrik/FEISTY/tree/master/CODE/clim_complete</a></p>",
        "id": 17706,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1600793874
    },
    {
        "content": "<p>Awesome, thanks! Can we schedule a walk thru in a couple of weeks? I would like to invite <span class=\"user-mention\" data-user-id=\"28\">@Kristen Krumhardt</span>, <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> and possibly <span class=\"user-mention\" data-user-id=\"39\">@Zephyr Sylvester</span> (if she has time).</p>\n<p>I think the key thing is to identify a refactoring plan. We might want to consider a code base capable of supporting both offline and online applications.</p>\n<p>In the context of this effort, it will be really useful to have a reference solution against which to check answers.</p>",
        "id": 17711,
        "sender_full_name": "Matt Long",
        "timestamp": 1600796042
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"*\">@stream</span>  I can give a walk through in Oct.</p>",
        "id": 17926,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1600908017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span>, I was starting to poke around the FEISTY code you have linked above. Do you have an example of the code being called? I would like to develop a better understanding of the calling tree.</p>",
        "id": 33178,
        "sender_full_name": "Matt Long",
        "timestamp": 1622648527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> , the code calling tree looks like Make.m -&gt; Simulation -&gt; sub_futbio.m <br>\nMake just picks the simulation. The example simulation in that repository is the ESM2.6-COBALT Climatology. The simulation code has some set-up for loading the gridfile and the forcing file(s) and creating the netcdf files for saving in addition to calling the main program \"sub_futbio.\" The main program is where the majority of the subroutines get called. e.g. metabolism, encounter, ingestion, consumption, reproduction, etc. Let me know if you want anything more specific than that.</p>",
        "id": 33236,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1622659653
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> and <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , I have pushed all FEISTY documentation, including a check table of input and output values, to my github repo. <br>\n<a href=\"https://github.com/cpetrik/fish-offline/tree/main/docs\">https://github.com/cpetrik/fish-offline/tree/main/docs</a></p>",
        "id": 44651,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1633649005
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span>!</p>",
        "id": 44657,
        "sender_full_name": "Matt Long",
        "timestamp": 1633696097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> , <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , <span class=\"user-mention\" data-user-id=\"39\">@Zephyr Sylvester</span> : I did a quick run of the testcase using my Matlab code and the testcase default parameters, bathymetry, and cyclical forcing. It results in an increase in biomass of all types, not a decrease. Definitely something to dig into in the new year. <a href=\"/user_uploads/2/a3/5AnwWuFCLGSwBiDjPU4jWez7/testcase_v1_All_fish03_ts_logmean_biomass_location1.png\">testcase_v1_All_fish03_ts_logmean_biomass_location1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/a3/5AnwWuFCLGSwBiDjPU4jWez7/testcase_v1_All_fish03_ts_logmean_biomass_location1.png\" title=\"testcase_v1_All_fish03_ts_logmean_biomass_location1.png\"><img src=\"/user_uploads/2/a3/5AnwWuFCLGSwBiDjPU4jWez7/testcase_v1_All_fish03_ts_logmean_biomass_location1.png\"></a></div>",
        "id": 48531,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1640216339
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span> can you point me to the matlab code you ran? I'm going to do some side-by-side comparisons of the matlab and python code bases, and maybe also try to do some single-time-step runs with the matlab code on cheyenne to see if I can pinpoint where the issue(s) in the python code is (are)</p>",
        "id": 48726,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641415622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , they are in my FEISTY git repo: <a href=\"https://github.com/cpetrik/fish-offline/tree/main/MatFEISTY\">https://github.com/cpetrik/fish-offline/tree/main/MatFEISTY</a> . The main file is ``testcase.m''. Let me know if you need any help navigating the subroutines.</p>",
        "id": 48754,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1641428444
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> . Today I looked through default_settings.yml and process.py for issues. I could not find anything in process.py, but there were a number of default settings that were wrong. I modified them, one at a time, to the correct values, but they did not have any effect and the biomasses of all groups followed the same trajectory as before.  For my next course of action, I will look at the outputs of each subroutine/function after one time step in the Matlab and Python versions.  I have attached the updated default settings for you to work with. <a href=\"/user_uploads/2/16/4mROCDm1iJIoWOYFbgf9aWjs/default_settings_CPedits.yml\">default_settings_CPedits.yml</a></p>",
        "id": 48822,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1641511632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span> thanks for that updated settings file -- I'm currently adding a bunch of <code>disp()</code> calls to your matlab driver and making sure I am getting similar values in the python code. The encounter code looks okay, and I found a bug in the consumption code:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/feisty/core/process.py b/feisty/core/process.py</span>\n<span class=\"gh\">index 9906882..a7bc0d0 100644</span>\n<span class=\"gd\">--- a/feisty/core/process.py</span>\n<span class=\"gi\">+++ b/feisty/core/process.py</span>\n<span class=\"gu\">@@ -202,7 +202,7 @@ def compute_consumption(</span>\n     \"\"\"\n\n     for i, link in enumerate(food_web):\n<span class=\"gd\">-        enc = consumption_rate_link[i, :]</span>\n<span class=\"gi\">+        enc = encounter_rate_link[i, :]</span>\n         cmax = consumption_rate_max_pred[link.i_fish, :]\n         enc_total = encounter_rate_total[link.i_fish, :]\n         consumption_rate_link[i, :] = cmax * enc / (cmax + enc_total)\n</code></pre></div>\n<p>With that fix in place, consumption numbers look better but biomass is still decreasing (looking at <code>group in [\"Mf\", \"Mp\", \"Md\", \"Lp\", \"Ld\"]</code>)</p>",
        "id": 48874,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641588442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> more issues with the encounter rate... In the matlab code, we only subtract the <code>.td</code> value from 1 when computing the <code>Md.enc_be</code> (<code>Md_benthic_prey</code>), <code>Lp.enc_d</code> (<code>Lp_Md</code>), <code>Ld.enc_d</code> (<code>Ld_Md</code>), and <code>Ld.enc_be</code> (<code>Ld_benthic_prey</code>) encounters. So I think the <code>if link.prey.is_demersal</code> logic isn't quite what we want, but I'm not sure what to replace it with. Currently I'm seeing an encounter rate of 0 in the python code for both <code>'Mf_Sd'</code> and <code>'Mp_Sd'</code>, and I think it's tied to the fact that <code>Sd</code> is <code>demersal</code> but <code>t_frac_pelagic_static=1</code>. This might not be right because changing <code>t_frac_pelagic_static</code> affects the encounter rate for <code>Sd_Zoo</code>, without changing it for the two medium-size classes preying on <code>Sd</code>... so I'm a little confused.</p>",
        "id": 48893,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641601583
    },
    {
        "content": "<p>I’ll need to look at this in detail</p>",
        "id": 48894,
        "sender_full_name": "Matt Long",
        "timestamp": 1641603752
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"10\">Michael Levy</span> <a href=\"#narrow/stream/33-fisheries/topic/FEISTY.20code/near/48874\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"122\">Colleen Petrik</span> thanks for that updated settings file -- I'm currently adding a bunch of <code>disp()</code> calls to your matlab driver and making sure I am getting similar values in the python code. The encounter code looks okay, and I found a bug in the consumption code:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/feisty/core/process.py b/feisty/core/process.py</span>\n<span class=\"gh\">index 9906882..a7bc0d0 100644</span>\n<span class=\"gd\">--- a/feisty/core/process.py</span>\n<span class=\"gi\">+++ b/feisty/core/process.py</span>\n<span class=\"gu\">@@ -202,7 +202,7 @@ def compute_consumption(</span>\n     \"\"\"\n\n     for i, link in enumerate(food_web):\n<span class=\"gd\">-        enc = consumption_rate_link[i, :]</span>\n<span class=\"gi\">+        enc = encounter_rate_link[i, :]</span>\n         cmax = consumption_rate_max_pred[link.i_fish, :]\n         enc_total = encounter_rate_total[link.i_fish, :]\n         consumption_rate_link[i, :] = cmax * enc / (cmax + enc_total)\n</code></pre></div>\n<p>With that fix in place, consumption numbers look better but biomass is still decreasing (looking at <code>group in [\"Mf\", \"Mp\", \"Md\", \"Lp\", \"Ld\"]</code>)</p>\n</blockquote>\n<p>Excellent work!</p>",
        "id": 48898,
        "sender_full_name": "Matt Long",
        "timestamp": 1641648151
    },
    {
        "content": "<p>In the Matlab code, <code>sub_init_fish_spin.m</code>, </p>\n<div class=\"codehilite\" data-code-language=\"Matlab\"><pre><span></span><code><span class=\"n\">Sd</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"nb\">ones</span><span class=\"p\">(</span><span class=\"n\">NX</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So I think <code>t_frac_pelagic_static = 1</code> for <code>Sd</code> is correct. These are larval demersal fish.</p>",
        "id": 48899,
        "sender_full_name": "Matt Long",
        "timestamp": 1641648653
    },
    {
        "content": "<p>Regarding the logic on <code>if link.prey.is_demersal</code>, I think the logic I had is correct. Here's why I think so.</p>\n<p>I introduced a variable <code>t_frac_prey_pred</code> which is the fraction of time the predator spends in the region with it's prey. This corresponds to <code>tprey</code> in the <code>sub_enc</code> Matlab function API.</p>\n<p>The variable <code>t_frac_pelagic_pred</code> is always the fraction of time the predator spends in the pelagic zone. I think this implies that regardless of the predator type (i.e.,  whether <code>is_demersal</code> is true or false), the logic should be</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>            <span class=\"k\">if</span> <span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">prey</span><span class=\"o\">.</span><span class=\"n\">is_demersal</span><span class=\"p\">:</span>\n                <span class=\"n\">t_frac_prey_pred</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span> <span class=\"o\">-</span> <span class=\"n\">t_frac_pelagic_pred</span>\n</code></pre></div>\n<p>The demersal groups are</p>\n<ul>\n<li><code>Md</code></li>\n<li><code>Ld</code></li>\n<li><code>benthic_prey</code></li>\n</ul>\n<p>The settings are consistent with this.</p>\n<p>Here's what the matlab code has:</p>\n<div class=\"codehilite\" data-code-language=\"Matlab\"><pre><span></span><code><span class=\"n\">Sf</span><span class=\"p\">.</span><span class=\"n\">enc_zm</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Zoo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Sf</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Sp</span><span class=\"p\">.</span><span class=\"n\">enc_zm</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Zoo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Sp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Sd</span><span class=\"p\">.</span><span class=\"n\">enc_zm</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Zoo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Sd</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n\n<span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">enc_zm</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Zoo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">enc_f</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">enc_p</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">enc_d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n\n<span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">enc_zm</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">zoo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">enc_f</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\">  </span><span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">enc_p</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\">  </span><span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">enc_d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\">  </span><span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n\n<span class=\"n\">Md</span><span class=\"p\">.</span><span class=\"n\">enc_be</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">benthic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">Md</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n\n<span class=\"n\">Lp</span><span class=\"p\">.</span><span class=\"n\">enc_f</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Lp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Lp</span><span class=\"p\">.</span><span class=\"n\">enc_p</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Mp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Lp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Lp</span><span class=\"p\">.</span><span class=\"n\">enc_d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Md</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">Lp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n\n<span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">enc_f</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">enc_p</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Mp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">enc_d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Md</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">enc_be</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">benthic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">Ld</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 48900,
        "sender_full_name": "Matt Long",
        "timestamp": 1641650627
    },
    {
        "content": "<p>I think you can confirm that the <code>is_demersal</code> dependence is correct.</p>\n<p>On this last point:</p>\n<blockquote>\n<p>Currently I'm seeing an encounter rate of 0 in the python code for both 'Mf_Sd' and 'Mp_Sd', and I think it's tied to the fact that Sd is demersal but t_frac_pelagic_static=1. This might not be right because changing t_frac_pelagic_static affects the encounter rate for Sd_Zoo, without changing it for the two medium-size classes preying on Sd... so I'm a little confused.</p>\n</blockquote>\n<p>This does seem strange, that the <code>t_frac_pelagic_static</code> of prey doesn't affect the encounter rate.</p>",
        "id": 48901,
        "sender_full_name": "Matt Long",
        "timestamp": 1641651016
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"14\">Matt Long</span> <a href=\"#narrow/stream/33-fisheries/topic/FEISTY.20code/near/48900\">said</a>:</p>\n<blockquote>\n<p>The demersal groups are</p>\n<ul>\n<li><code>Md</code></li>\n<li><code>Ld</code></li>\n<li><code>benthic_prey</code></li>\n</ul>\n</blockquote>\n<p>Shouldn't <code>Sd</code> be in that group as well?</p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code>    <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Sd</span>\n      <span class=\"nt\">size_class</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">small</span>\n      <span class=\"nt\">functional_type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">demersal</span>\n</code></pre></div>\n<p>I guess I'm confused about why <code>tprey = Mf.td</code> and <code>Mp.td</code> instead of  <code>1 - Mf.td</code> and <code>1 - Mp.td</code> in the lines</p>\n<div class=\"codehilite\" data-code-language=\"Matlab\"><pre><span></span><code><span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">enc_d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"n\">Mf</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n<span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">enc_d</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"n\">prey</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">Sd</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tprey</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\">  </span><span class=\"n\">Mp</span><span class=\"p\">.</span><span class=\"n\">td</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That does not seem consistent with the <code>link.prey.is_demersal</code> logic in the python code (but perhaps the issue is on the matlab side?)</p>",
        "id": 48902,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641662417
    },
    {
        "content": "<p>I made a table comparing the encounter rates for matlab and python -- it looks like we're getting relative differences of order 1e-3 or 1e-5 when the values are close (which is a surprise, I would've expected better precision), but there are a lot of values that are not close</p>\n<table>\n<thead>\n<tr>\n<th>feeding_link</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2936e+00</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Sp_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2936e+00</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Sd_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2936e+00</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Mf_Zoo</td>\n<td>2.9714e-01</td>\n<td>2.9781e-01</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Mf_Sf</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mf_Sp</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mf_Sd</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Mp_Zoo</td>\n<td>2.9714e-01</td>\n<td>2.9781e-01</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Mp_Sf</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mp_Sp</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mp_Sd</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Md_benthic_prey</td>\n<td>1.7232e-04</td>\n<td>1.8233e-17</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Lp_Mf</td>\n<td>5.7237e-07</td>\n<td>2.1328e-07</td>\n<td>6.2737e-01</td>\n</tr>\n<tr>\n<td>Lp_Mp</td>\n<td>5.7237e-07</td>\n<td>4.2656e-07</td>\n<td>2.5474e-01</td>\n</tr>\n<tr>\n<td>Lp_Md</td>\n<td>0.0000e+00</td>\n<td>4.2656e-07</td>\n<td>inf</td>\n</tr>\n<tr>\n<td>Ld_Mf</td>\n<td>2.3891e-07</td>\n<td>1.4172e-07</td>\n<td>4.0678e-01</td>\n</tr>\n<tr>\n<td>Ld_Mp</td>\n<td>2.3891e-07</td>\n<td>2.8345e-07</td>\n<td>1.8643e-01</td>\n</tr>\n<tr>\n<td>Ld_Md</td>\n<td>2.3891e-07</td>\n<td>3.7793e-07</td>\n<td>5.8191e-01</td>\n</tr>\n<tr>\n<td>Ld_benthic_prey</td>\n<td>5.0135e-05</td>\n<td>8.3917e-18</td>\n<td>1.0000e+00</td>\n</tr>\n</tbody>\n</table>\n<p>I've pulled out the big differences here:</p>\n<table>\n<thead>\n<tr>\n<th>feeding_link</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Mf_Sd</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Mp_Sd</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Md_benthic_prey</td>\n<td>1.7232e-04</td>\n<td>1.8233e-17</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Lp_Mf</td>\n<td>5.7237e-07</td>\n<td>2.1328e-07</td>\n<td>6.2737e-01</td>\n</tr>\n<tr>\n<td>Lp_Mp</td>\n<td>5.7237e-07</td>\n<td>4.2656e-07</td>\n<td>2.5474e-01</td>\n</tr>\n<tr>\n<td>Lp_Md</td>\n<td>0.0000e+00</td>\n<td>4.2656e-07</td>\n<td>inf</td>\n</tr>\n<tr>\n<td>Ld_Mf</td>\n<td>2.3891e-07</td>\n<td>1.4172e-07</td>\n<td>4.0678e-01</td>\n</tr>\n<tr>\n<td>Ld_Mp</td>\n<td>2.3891e-07</td>\n<td>2.8345e-07</td>\n<td>1.8643e-01</td>\n</tr>\n<tr>\n<td>Ld_Md</td>\n<td>2.3891e-07</td>\n<td>3.7793e-07</td>\n<td>5.8191e-01</td>\n</tr>\n<tr>\n<td>Ld_benthic_prey</td>\n<td>5.0135e-05</td>\n<td>8.3917e-18</td>\n<td>1.0000e+00</td>\n</tr>\n</tbody>\n</table>",
        "id": 48903,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641680978
    },
    {
        "content": "<p>And the same table for consumption; no surprises here given the relationship between encounter rate and consumption rate</p>\n<table>\n<thead>\n<tr>\n<th>feeding_link</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf_Zoo</td>\n<td>2.1520e-01</td>\n<td>2.1523e-01</td>\n<td>1.7479e-04</td>\n</tr>\n<tr>\n<td>Sp_Zoo</td>\n<td>2.1520e-01</td>\n<td>2.1523e-01</td>\n<td>1.7479e-04</td>\n</tr>\n<tr>\n<td>Sd_Zoo</td>\n<td>2.1520e-01</td>\n<td>2.1523e-01</td>\n<td>1.7479e-04</td>\n</tr>\n<tr>\n<td>Mf_Zoo</td>\n<td>4.2967e-02</td>\n<td>4.2980e-02</td>\n<td>2.9564e-04</td>\n</tr>\n<tr>\n<td>Mf_Sf</td>\n<td>2.8684e-07</td>\n<td>2.8628e-07</td>\n<td>1.9803e-03</td>\n</tr>\n<tr>\n<td>Mf_Sp</td>\n<td>2.8684e-07</td>\n<td>2.8628e-07</td>\n<td>1.9803e-03</td>\n</tr>\n<tr>\n<td>Mf_Sd</td>\n<td>2.8684e-07</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Mp_Zoo</td>\n<td>4.2967e-02</td>\n<td>4.2980e-02</td>\n<td>2.9564e-04</td>\n</tr>\n<tr>\n<td>Mp_Sf</td>\n<td>2.8684e-07</td>\n<td>2.8628e-07</td>\n<td>1.9803e-03</td>\n</tr>\n<tr>\n<td>Mp_Sp</td>\n<td>2.8684e-07</td>\n<td>2.8628e-07</td>\n<td>1.9803e-03</td>\n</tr>\n<tr>\n<td>Mp_Sd</td>\n<td>2.8684e-07</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Md_benthic_prey</td>\n<td>1.7091e-04</td>\n<td>1.8233e-17</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Lp_Mf</td>\n<td>5.7231e-07</td>\n<td>2.1325e-07</td>\n<td>6.2738e-01</td>\n</tr>\n<tr>\n<td>Lp_Mp</td>\n<td>5.7231e-07</td>\n<td>4.2650e-07</td>\n<td>2.5476e-01</td>\n</tr>\n<tr>\n<td>Lp_Md</td>\n<td>0.0000e+00</td>\n<td>4.2650e-07</td>\n<td>inf</td>\n</tr>\n<tr>\n<td>Ld_Mf</td>\n<td>2.3620e-07</td>\n<td>1.4171e-07</td>\n<td>4.0005e-01</td>\n</tr>\n<tr>\n<td>Ld_Mp</td>\n<td>2.3620e-07</td>\n<td>2.8341e-07</td>\n<td>1.9990e-01</td>\n</tr>\n<tr>\n<td>Ld_Md</td>\n<td>2.3620e-07</td>\n<td>3.7789e-07</td>\n<td>5.9987e-01</td>\n</tr>\n<tr>\n<td>Ld_benthic_prey</td>\n<td>4.9567e-05</td>\n<td>8.3907e-18</td>\n<td>1.0000e+00</td>\n</tr>\n</tbody>\n</table>",
        "id": 48904,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641681335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span>, I am tied up today and tomorrow in the LEAP meeting.</p>",
        "id": 48906,
        "sender_full_name": "Matt Long",
        "timestamp": 1641825298
    },
    {
        "content": "<p>After chatting with <span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span> , I think I'm happy with all of the encounter rates and consumption rates being computed in the python code. Here's the updated encounter rate table:</p>\n<table>\n<thead>\n<tr>\n<th>feeding_link</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2936e+00</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Sp_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2936e+00</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Sd_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2936e+00</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Mf_Zoo</td>\n<td>2.9714e-01</td>\n<td>2.9781e-01</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Mf_Sf</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mf_Sp</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mf_Sd</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mp_Zoo</td>\n<td>2.9714e-01</td>\n<td>2.9781e-01</td>\n<td>2.2411e-03</td>\n</tr>\n<tr>\n<td>Mp_Sf</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mp_Sp</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Mp_Sd</td>\n<td>1.9837e-06</td>\n<td>1.9836e-06</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Md_benthic_prey</td>\n<td>1.7232e-04</td>\n<td>1.7232e-04</td>\n<td>2.6443e-05</td>\n</tr>\n<tr>\n<td>Lp_Mf</td>\n<td>2.8618e-07</td>\n<td>2.8617e-07</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Lp_Mp</td>\n<td>5.7237e-07</td>\n<td>5.7235e-07</td>\n<td>3.9203e-05</td>\n</tr>\n<tr>\n<td>Lp_Md</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Ld_Mf</td>\n<td>8.9267e-08</td>\n<td>8.9590e-08</td>\n<td>3.6110e-03</td>\n</tr>\n<tr>\n<td>Ld_Mp</td>\n<td>1.7853e-07</td>\n<td>1.7918e-07</td>\n<td>3.6110e-03</td>\n</tr>\n<tr>\n<td>Ld_Md</td>\n<td>2.3805e-07</td>\n<td>2.3891e-07</td>\n<td>3.6110e-03</td>\n</tr>\n<tr>\n<td>Ld_benthic_prey</td>\n<td>4.9955e-05</td>\n<td>5.0134e-05</td>\n<td>3.5863e-03</td>\n</tr>\n</tbody>\n</table>\n<p>I'm seeing linear growth in the biomass of <code>Mp</code> but everything else is dropping:</p>\n<p><a href=\"/user_uploads/2/23/IA7q3pOCtoida0Q9Bu2LaVvQ/biomass-from-python.png\">biomass-from-python.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/23/IA7q3pOCtoida0Q9Bu2LaVvQ/biomass-from-python.png\" title=\"biomass-from-python.png\"><img src=\"/user_uploads/2/23/IA7q3pOCtoida0Q9Bu2LaVvQ/biomass-from-python.png\"></a></div><p>I'll keep poking around tomorrow. (Also, I opened up <a href=\"https://github.com/marbl-ecosys/feisty/pull/6\">marbl-ecosys/feisty#6</a> to make it easier to track changes; having some CI issues, but at least the code is out there)</p>",
        "id": 48963,
        "sender_full_name": "Michael Levy",
        "timestamp": 1641858809
    },
    {
        "content": "<p>good news / bad news -- I think I've tracked down the problem to the recruitment code:</p>\n<table>\n<thead>\n<tr>\n<th>fish</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf</td>\n<td>1.4534e-09</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Sp</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf</td>\n<td>1.0762e-06</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Mp</td>\n<td>1.0762e-06</td>\n<td>1.5367e-07</td>\n<td>8.5721e-01</td>\n</tr>\n<tr>\n<td>Md</td>\n<td>1.0762e-06</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Lp</td>\n<td>1.5276e-07</td>\n<td>0.0000e+00</td>\n<td>1.0000e+00</td>\n</tr>\n<tr>\n<td>Ld</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n</tr>\n</tbody>\n</table>\n<p>For the larval recruitment, e.g. </p>\n<div class=\"codehilite\" data-code-language=\"YAML\"><pre><span></span><code>  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">from</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Mf</span>\n    <span class=\"nt\">to</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">Sf</span>\n    <span class=\"nt\">efficiency</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.01</span>\n    <span class=\"nt\">is_larval</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</code></pre></div>\n<p>the problem is that</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>        <span class=\"k\">if</span> <span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">is_larval</span><span class=\"p\">:</span>\n            <span class=\"n\">recruitment_flux</span><span class=\"p\">[</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">i_fish</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">efficiency</span>\n                <span class=\"o\">*</span> <span class=\"n\">reproduction_rate</span><span class=\"p\">[</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">i_fish</span><span class=\"p\">,</span> <span class=\"p\">:]</span>\n                <span class=\"o\">*</span> <span class=\"n\">biomass</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">ndx_from</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n</code></pre></div>\n<p><code> reproduction_rate[link.i_fish, :]</code> is the reproduction rate of the <code>Sf</code> rather than <code>Mf</code>. A similar issue occurs in the non-larval recruitment</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>            <span class=\"n\">recruitment_flux</span><span class=\"p\">[</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">i_fish</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">=</span> <span class=\"n\">growth_rate</span><span class=\"p\">[</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">i_fish</span><span class=\"p\">,</span> <span class=\"p\">:]</span> <span class=\"o\">*</span> <span class=\"n\">biomass</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span>\n                <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">link</span><span class=\"o\">.</span><span class=\"n\">ndx_from</span>\n            <span class=\"p\">)</span>\n</code></pre></div>\n<p>where <code>growth_rate[link.i_fish, :]</code> is the growth rate of the <code>to</code> fish rather than the <code>from</code>.  The hard part is that the dimensions of <code>reproduction_rate</code>  (and <code>growth_rate</code>) are <code>fish</code> and <code>X</code>, while the rest of the code is assuming we only need to know the <code>group</code> index of <code>Mf</code> (since <code>biomass</code> has dimensions <code>group</code> and <code>X</code>). So I think we maybe want to rename <code>link.ndx_from</code> to <code>link.group_ndx_from</code> and also find <code>link.fish_ndx_from</code>? I'm going to try that out, but I'm open to cleaner fixes (presuming this actually fixes the problem)</p>",
        "id": 49158,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642024467
    },
    {
        "content": "<p>I am not sure I follow.</p>",
        "id": 49159,
        "sender_full_name": "Matt Long",
        "timestamp": 1642024644
    },
    {
        "content": "<p>I have a few minutes, quick call?</p>",
        "id": 49160,
        "sender_full_name": "Matt Long",
        "timestamp": 1642024663
    },
    {
        "content": "<p>yup, just sent you a PM with a zoom link</p>",
        "id": 49162,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642024810
    },
    {
        "content": "<p>Matt and I worked out the last of the major kinks, and now my plot from the first column looks like this:</p>\n<p><a href=\"/user_uploads/2/55/jCMtvVmKOX-mpPYgqGbZdXJp/biomass-from-python-take-2.png\">biomass-from-python-take-2.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/55/jCMtvVmKOX-mpPYgqGbZdXJp/biomass-from-python-take-2.png\" title=\"biomass-from-python-take-2.png\"><img src=\"/user_uploads/2/55/jCMtvVmKOX-mpPYgqGbZdXJp/biomass-from-python-take-2.png\"></a></div><p>This is close to <span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span>'s plot, but doesn't have <code>Ld</code> starting to grow in the middle of the year. Any hints on what to look for to figure out why that isn't being triggered? Here are the differences in biomass after the first time step:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf</td>\n<td>9.9993e-06</td>\n<td>9.9993e-06</td>\n<td>8.1225e-06</td>\n</tr>\n<tr>\n<td>Sp</td>\n<td>9.9978e-06</td>\n<td>9.9978e-06</td>\n<td>5.7341e-08</td>\n</tr>\n<tr>\n<td>Sd</td>\n<td>9.9978e-06</td>\n<td>9.9978e-06</td>\n<td>5.7341e-08</td>\n</tr>\n<tr>\n<td>Mf</td>\n<td>1.1076e-05</td>\n<td>1.1068e-05</td>\n<td>7.0402e-04</td>\n</tr>\n<tr>\n<td>Mp</td>\n<td>1.1076e-05</td>\n<td>1.1075e-05</td>\n<td>4.7476e-05</td>\n</tr>\n<tr>\n<td>Md</td>\n<td>1.1030e-05</td>\n<td>1.1030e-05</td>\n<td>2.6002e-05</td>\n</tr>\n<tr>\n<td>Lp</td>\n<td>1.0093e-05</td>\n<td>1.0094e-05</td>\n<td>9.0167e-05</td>\n</tr>\n<tr>\n<td>Ld</td>\n<td>9.9746e-06</td>\n<td>9.9745e-06</td>\n<td>7.1689e-06</td>\n</tr>\n<tr>\n<td>benthic_prey</td>\n<td>2.0985e-03</td>\n<td>2.0985e-03</td>\n<td>2.4576e-05</td>\n</tr>\n</tbody>\n</table>",
        "id": 49170,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642027197
    },
    {
        "content": "<p>Getting there! This is great.</p>",
        "id": 49174,
        "sender_full_name": "Matt Long",
        "timestamp": 1642027751
    },
    {
        "content": "<p>why does <code>Ld</code> start to grow mid-year in <span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span>'s runs? Are we sure that the forcing is the same?</p>",
        "id": 49175,
        "sender_full_name": "Matt Long",
        "timestamp": 1642027792
    },
    {
        "content": "<p>I want to double check all of the input data (forcing, initial conditions, parameters, etc). I think something is slightly off in one (or more) of them, since the differences we're seeing in the first time step are much bigger than round-off. I was hoping the table above would show relative errors that were O(1e-10)...</p>",
        "id": 49179,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642028136
    },
    {
        "content": "<p>It looks like the forcing data for the python code matches what is in the matlab code, but I think there's an off-by-one error in choosing which time level from the forcing to apply. Here's some forcing data from the first column for two days of a matlab run:</p>\n<div class=\"codehilite\"><pre><span></span><code>poc_flux: 0.02784712404856\nT_pelagic: 18.20000000000000\nT_bottom: 4.20000000000000\n\npoc_flux: 0.02784643640657\nT_pelagic: 18.19937772467829\nT_bottom: 4.19997036784182\n</code></pre></div>\n<p>and the same output from python</p>\n<div class=\"codehilite\"><pre><span></span><code>poc_flux 0.027846436406572337\nT_pelagic 18.19937772467829\nT_bottom 4.199970367841823\n\npoc_flux 0.027844373684374066\nT_pelagic 18.19751108310676\nT_bottom 4.199881480147941\n</code></pre></div>",
        "id": 49264,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642107729
    },
    {
        "content": "<p>Looks like there was a mismatch in <code>time</code> between the driver (1 -&gt; 365) and the idealized forcing (0 -&gt; 365)... I fixed that, and am now noticing an issue in <code>T_habitat</code> for <code>Ld</code> that is propagating through the computation but I think that's the last real issue. These encounter rates (aside from <code>Ld_*</code>) are much closer to what I expected:</p>\n<table>\n<thead>\n<tr>\n<th>feeding_link</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2885e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sp_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2885e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd_Zoo</td>\n<td>2.2885e+00</td>\n<td>2.2885e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf_Zoo</td>\n<td>2.9714e-01</td>\n<td>2.9714e-01</td>\n<td>1.8682e-16</td>\n</tr>\n<tr>\n<td>Mf_Sf</td>\n<td>1.9837e-06</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf_Sp</td>\n<td>1.9837e-06</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf_Sd</td>\n<td>1.9837e-06</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mp_Zoo</td>\n<td>2.9714e-01</td>\n<td>2.9714e-01</td>\n<td>1.8682e-16</td>\n</tr>\n<tr>\n<td>Mp_Sf</td>\n<td>1.9837e-06</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mp_Sp</td>\n<td>1.9837e-06</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mp_Sd</td>\n<td>1.9837e-06</td>\n<td>1.9837e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Md_benthic_prey</td>\n<td>1.7232e-04</td>\n<td>1.7232e-04</td>\n<td>1.5729e-16</td>\n</tr>\n<tr>\n<td>Lp_Mf</td>\n<td>2.8618e-07</td>\n<td>2.8618e-07</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Lp_Mp</td>\n<td>5.7237e-07</td>\n<td>5.7237e-07</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Lp_Md</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Ld_Mf</td>\n<td>8.9267e-08</td>\n<td>8.9590e-08</td>\n<td>3.6130e-03</td>\n</tr>\n<tr>\n<td>Ld_Mp</td>\n<td>1.7853e-07</td>\n<td>1.7918e-07</td>\n<td>3.6130e-03</td>\n</tr>\n<tr>\n<td>Ld_Md</td>\n<td>2.3805e-07</td>\n<td>2.3891e-07</td>\n<td>3.6130e-03</td>\n</tr>\n<tr>\n<td>Ld_benthic_prey</td>\n<td>4.9955e-05</td>\n<td>5.0135e-05</td>\n<td>3.6130e-03</td>\n</tr>\n</tbody>\n</table>",
        "id": 49265,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642109702
    },
    {
        "content": "<p>Glad you found the time error, <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> . The reason that Ld doesn't grow until ~50 d is because there is zero recruitment into Ld until then. That is because the energy available for growth out of Md is negative before that time. <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span></p>",
        "id": 49290,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1642116125
    },
    {
        "content": "<p>Okay, as of <a href=\"https://github.com/mnlevy1981/feisty/tree/0b646b7374a7648e91eead9096427469eb1d4504\">0b646b7</a> I think most of the major bugs are squashed. Comparing to the matlab code, I'm seeing roundoff level differences in biomass after day 365:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf</td>\n<td>1.7696e-05</td>\n<td>1.7696e-05</td>\n<td>3.8292e-16</td>\n</tr>\n<tr>\n<td>Sp</td>\n<td>9.3653e-06</td>\n<td>9.3653e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd</td>\n<td>9.4480e-06</td>\n<td>9.4480e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf</td>\n<td>4.0856e-04</td>\n<td>4.0856e-04</td>\n<td>1.3269e-16</td>\n</tr>\n<tr>\n<td>Mp</td>\n<td>3.1926e-04</td>\n<td>3.1926e-04</td>\n<td>3.3960e-16</td>\n</tr>\n<tr>\n<td>Md</td>\n<td>3.1755e-04</td>\n<td>3.1755e-04</td>\n<td>1.7071e-16</td>\n</tr>\n<tr>\n<td>Lp</td>\n<td>4.7386e-04</td>\n<td>4.7386e-04</td>\n<td>4.5760e-16</td>\n</tr>\n<tr>\n<td>Ld</td>\n<td>2.2672e-04</td>\n<td>2.2672e-04</td>\n<td>1.1955e-16</td>\n</tr>\n<tr>\n<td>benthic_prey</td>\n<td>6.3447e-01</td>\n<td>6.3447e-01</td>\n<td>0.0000e+00</td>\n</tr>\n</tbody>\n</table>\n<p>The full-year plot looks pretty good, if I do say so myself:</p>\n<p><a href=\"/user_uploads/2/57/pHcE91_RyCFYArd6oWFGhaQD/biomass-from-python-take-3.png\">biomass-from-python-take-3.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/57/pHcE91_RyCFYArd6oWFGhaQD/biomass-from-python-take-3.png\" title=\"biomass-from-python-take-3.png\"><img src=\"/user_uploads/2/57/pHcE91_RyCFYArd6oWFGhaQD/biomass-from-python-take-3.png\"></a></div><p>I need to take off, but tomorrow morning I'll clean up open up issue tickets for all the issues I came across, link them to the PR, and then open the PR for review</p>",
        "id": 49291,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642116172
    },
    {
        "content": "<p>Terrific! Excellent work <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span>!</p>\n<p>Super excited to have achieved this milestone!</p>",
        "id": 49292,
        "sender_full_name": "Matt Long",
        "timestamp": 1642116284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> I think <a href=\"https://github.com/marbl-ecosys/feisty/pull/6\">marbl-ecosys/feisty#6</a> is ready for review / merging... it's failing the documentation CI task because I don't know what I need to do to set things up so that I can push to the <code>gh-pages</code> branch from the VM but everything else should be passing and you probably got a dozen emails about the new issues I created / linked to the PR. (Fun fact; you can only link 10 issues to a PR, but that turned out to be exactly the number I needed.)</p>",
        "id": 49307,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642178464
    },
    {
        "content": "<p>I added you as admin on the project: maybe that will avoid this error in the future?</p>",
        "id": 49352,
        "sender_full_name": "Matt Long",
        "timestamp": 1642188167
    },
    {
        "content": "<p>well, it looks like I didn't pay close attention to the CI results and broke <code>test_simulate_testcase_init_2</code> -- so I'll see if the documentation builds for me after pushing a fix for that</p>",
        "id": 49353,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642188427
    },
    {
        "content": "<p>oh, I missed that too...and just merged</p>",
        "id": 49354,
        "sender_full_name": "Matt Long",
        "timestamp": 1642188460
    },
    {
        "content": "<p>no worries, I'll throw together another branch</p>",
        "id": 49355,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642188613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , I created a new testcase with the Matlab code. It is in my fish-offline/MatFEISTY git repo.  The main code is \"test_locs3.m\" and in the input files folder is a forcing file \"feisty_input_climatol_daily_locs3\" both in netcdf and mat format.</p>",
        "id": 49551,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1642797369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span> thanks, that's great! I've opened up a PR (<a href=\"https://github.com/marbl-ecosys/feisty/pull/24\">marbl-ecosys/feisty#24</a>] where we apply the biomass tendency for benthic prey at the same time as the biomass tendency for fish in the python code. I know we talked about getting the same change into the matlab code -- do you want me to try to put together a similar pull request for fish-offline?</p>",
        "id": 49553,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642800687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , I changed the placement of the \"sub_update_be\" function to the end of \"sub_futbio\" Matlab code with the rest of the fish and pushed it. It does not appear to change the results of the 3 location test run.</p>",
        "id": 49572,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1642806195
    },
    {
        "content": "<p>thanks! I'm a little surprised that it doesn't change answers, but I'll update my checkout of <code>fish-offline</code> and then try to set up the three location test in python</p>",
        "id": 49573,
        "sender_full_name": "Michael Levy",
        "timestamp": 1642806376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span> I needed to make one small change to <code>sub_futbio_1meso.m</code> to make sure we were updating the benthic prey biomass before any of the fish biomass (otherwise we were using the newly-updated <code>Md.bio</code> and <code>Ld.bio</code> instead of the values used elsewhere in the time-step):</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code>$ git diff sub_futbio_1meso.m\n<span class=\"gh\">diff --git a/MatFEISTY/sub_futbio_1meso.m b/MatFEISTY/sub_futbio_1meso.m</span>\n<span class=\"gh\">index 2091184..eb95e49 100644</span>\n<span class=\"gd\">--- a/MatFEISTY/sub_futbio_1meso.m</span>\n<span class=\"gi\">+++ b/MatFEISTY/sub_futbio_1meso.m</span>\n<span class=\"gu\">@@ -198,6 +198,8 @@ Ld.rec = sub_rec(Md.gamma,Md.bio);</span>\n [Ld.bio, Ld.caught, Ld.fmort] = sub_fishing_rate(Ld.bio,param.dfrate,param.LDsel);\n\n % Mass balance\n<span class=\"gi\">+[BENT.mass,BENT.pred] = sub_update_be(BENT.mass,param,ENVR.det,[Md.con_be,Ld.con_be],[Md.bio,Ld.bio]);</span>\n<span class=\"gi\">+</span>\n Sf.bio = sub_update_fi(Sf.bio,Sf.rec,Sf.nu,Sf.rep,Sf.gamma,Sf.die,Sf.nmort,Sf.fmort);\n Sp.bio = sub_update_fi(Sp.bio,Sp.rec,Sp.nu,Sp.rep,Sp.gamma,Sp.die,Sp.nmort,Sp.fmort);\n Sd.bio = sub_update_fi(Sd.bio,Sd.rec,Sd.nu,Sd.rep,Sd.gamma,Sd.die,Sd.nmort,Sd.fmort);\n<span class=\"gu\">@@ -209,8 +211,6 @@ Md.bio = sub_update_fi(Md.bio,Md.rec,Md.nu,Md.rep,Md.gamma,Md.die,Md.nmort,Md.fm</span>\n Lp.bio = sub_update_fi(Lp.bio,Lp.rec,Lp.nu,Lp.rep,Lp.gamma,Lp.die,Lp.nmort,Lp.fmort);\n Ld.bio = sub_update_fi(Ld.bio,Ld.rec,Ld.nu,Ld.rep,Ld.gamma,Ld.die,Ld.nmort,Ld.fmort);\n\n<span class=\"gd\">-[BENT.mass,BENT.pred] = sub_update_be(BENT.mass,param,ENVR.det,[Md.con_be,Ld.con_be],[Md.bio,Ld.bio]);</span>\n<span class=\"gd\">-</span>\n % Forward Euler checks for demographics and movement\n Sf.bio=sub_check(Sf.bio);\n Sp.bio=sub_check(Sp.bio);\n</code></pre></div>\n<p>Without that change, benthic prey biomass differs between the matlab and python code and that spreads throughout the results with longer runs. With the above change, the python matches <code>test_case.m</code> to within roundoff after 1 year. E.g. here's the biomass comparison after a year:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf</td>\n<td>1.7696e-05</td>\n<td>1.7696e-05</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sp</td>\n<td>9.3653e-06</td>\n<td>9.3653e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd</td>\n<td>9.4481e-06</td>\n<td>9.4481e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf</td>\n<td>4.0856e-04</td>\n<td>4.0856e-04</td>\n<td>1.3269e-16</td>\n</tr>\n<tr>\n<td>Mp</td>\n<td>3.1926e-04</td>\n<td>3.1926e-04</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Md</td>\n<td>3.1755e-04</td>\n<td>3.1755e-04</td>\n<td>1.7071e-16</td>\n</tr>\n<tr>\n<td>Lp</td>\n<td>4.7386e-04</td>\n<td>4.7386e-04</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Ld</td>\n<td>2.2687e-04</td>\n<td>2.2687e-04</td>\n<td>7.1683e-16</td>\n</tr>\n<tr>\n<td>benthic_prey</td>\n<td>6.3646e-01</td>\n<td>6.3646e-01</td>\n<td>0.0000e+00</td>\n</tr>\n</tbody>\n</table>",
        "id": 49823,
        "sender_full_name": "Michael Levy",
        "timestamp": 1643406333
    },
    {
        "content": "<p>Now I'm going to focus on getting the forcing from the new <code>test_locs3.m</code> into the python code... hopefully I'll have results early next week</p>",
        "id": 49824,
        "sender_full_name": "Michael Levy",
        "timestamp": 1643406469
    },
    {
        "content": "<p>Good catch, <span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> ! I will update my local code and push it to git.</p>",
        "id": 49825,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1643407183
    },
    {
        "content": "<p>I've put in hooks to read forcing data from netCDF -- it's pretty kludgy, but at least it's reading the file. I think there might be differences between the netCDF and what the matlab code is producing, though:</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>T_pelagic</td>\n<td>4.7453e+00</td>\n<td>4.7453e+00</td>\n<td>2.3927e-09</td>\n</tr>\n<tr>\n<td>T_bottom</td>\n<td>4.7647e+00</td>\n<td>4.7647e+00</td>\n<td>3.3720e-08</td>\n</tr>\n<tr>\n<td>zooC</td>\n<td>7.0175e+00</td>\n<td>7.0175e+00</td>\n<td>2.7658e-09</td>\n</tr>\n<tr>\n<td>poc_flux_bottom</td>\n<td>0.0000e+00</td>\n<td>-7.8530e-03</td>\n<td>-inf</td>\n</tr>\n<tr>\n<td>zoo_mort</td>\n<td>5.2470e-02</td>\n<td>5.2470e-02</td>\n<td>1.8489e-08</td>\n</tr>\n</tbody>\n</table>\n<p>I need to take off, mostly leaving this comment so I know where to pick back up on Monday :) <code>poc_flux_bottom</code> looks concerning, and it would be nice to get the rest of the fields within O(<code>1e-14</code>) but O(<code>1e-8</code>) should be fine for initial testing</p>",
        "id": 49829,
        "sender_full_name": "Michael Levy",
        "timestamp": 1643412203
    },
    {
        "content": "<p>It looks like a few things were happening: (1) netcdf file was writing single precision instead of double, and (2) negative values of <code>zooC</code>, <code>poc_flux_bottom</code>, and <code>zoo_mort</code> were not being zeroed out. I regenerated the forcing file and that table is all 0s in the <code>Rel Err</code> column now. Unfortunately, I'm getting all <code>nan</code>s in <code>biomass</code> after the first day, so clearly something else is going wrong - will investigate tomorrow</p>",
        "id": 49963,
        "sender_full_name": "Michael Levy",
        "timestamp": 1643848718
    },
    {
        "content": "<p>A few updates:</p>\n<ol>\n<li>I decided to set negative values of the forcing fields listed above to 0 in the python code rather than in the netCDF because the matlab code does this in <code>sub_futbio_1meso()</code></li>\n<li>The issue with <code>nan</code>s in the biomass was due to the time dimension starting at 1 instead of 0</li>\n<li>Since I needed to generate the netcdf file to get the time dimension correct, I went ahead and updated the forcing fields to be double precision</li>\n</ol>\n<p>Biomass from the python run looks really close to the matlab code after a full year:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf</td>\n<td>1.3654e-05</td>\n<td>1.3654e-05</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sp</td>\n<td>9.5706e-06</td>\n<td>9.5706e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd</td>\n<td>1.0002e-05</td>\n<td>1.0002e-05</td>\n<td>1.6937e-16</td>\n</tr>\n<tr>\n<td>Mf</td>\n<td>2.4689e-04</td>\n<td>2.4689e-04</td>\n<td>2.1957e-16</td>\n</tr>\n<tr>\n<td>Mp</td>\n<td>2.1750e-04</td>\n<td>2.1750e-04</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Md</td>\n<td>2.1868e-04</td>\n<td>2.1868e-04</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Lp</td>\n<td>3.0769e-04</td>\n<td>3.0769e-04</td>\n<td>1.7618e-16</td>\n</tr>\n<tr>\n<td>Ld</td>\n<td>4.0795e-04</td>\n<td>4.0795e-04</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>benthic_prey</td>\n<td>2.8417e+01</td>\n<td>2.8417e+01</td>\n<td>1.6253e-15</td>\n</tr>\n</tbody>\n</table>\n<p>I'm going to try running the full 20 years, but I think it'll take an hour or so to complete so I need to hop on a compute node...</p>",
        "id": 49974,
        "sender_full_name": "Michael Levy",
        "timestamp": 1643908538
    },
    {
        "content": "<p>to be clear, the above table is comparing biomass in the first column of the <code>test_locs3.m</code> setup after 1 year of simulation</p>",
        "id": 49975,
        "sender_full_name": "Michael Levy",
        "timestamp": 1643908606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , this is great! I've been meaning to document the process for running FEISTY with any ESM or GCM output for you and <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> :</p>\n<ol>\n<li>\n<p>In \"make_grid_data_cesm_nonans.m\" and similar<br>\n1a. Get model grid info on: Lon, Lat, Depth, Area, and ocean cells<br>\n1b. Save full those variables in 2D and extracted vector of ocean cells (1D) for each variable</p>\n</li>\n<li>\n<p>In \"daily_interp_cesm_fosi.m\" and similar<br>\n2a. Convert forcing data from netcdf to units used in FEISTY (gWW/m2 for biomass or gWW/m2/d for fluxes/rates)<br>\n2b. Extract vector of each variable at the ocean cells<br>\n2c. Interpolate all forcing data from monthly to daily</p>\n</li>\n</ol>",
        "id": 49995,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1643938854
    },
    {
        "content": "<p>I modified the matlab code to write out netCDF files instead of printing values to stdout and copying them into a YAML file... and it looks like the original 22 column idealized test case has some big differences outside of the first column:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf (t=0, X=6)</td>\n<td>9.9993e-06</td>\n<td>9.9993e-06</td>\n<td>2.1013e-09</td>\n</tr>\n<tr>\n<td>Sp (t=0, X=0)</td>\n<td>9.9978e-06</td>\n<td>9.9978e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd (t=0, X=0)</td>\n<td>9.9978e-06</td>\n<td>9.9978e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf (t=0, X=6)</td>\n<td>1.1076e-05</td>\n<td>1.1076e-05</td>\n<td>4.0735e-09</td>\n</tr>\n<tr>\n<td>Mp (t=0, X=6)</td>\n<td>1.1076e-05</td>\n<td>1.1076e-05</td>\n<td>4.5556e-09</td>\n</tr>\n<tr>\n<td>Md (t=0, X=6)</td>\n<td>1.1030e-05</td>\n<td>1.1030e-05</td>\n<td>2.1251e-07</td>\n</tr>\n<tr>\n<td>Lp (t=0, X=6)</td>\n<td>1.0093e-05</td>\n<td>1.0093e-05</td>\n<td>4.2030e-07</td>\n</tr>\n<tr>\n<td>Ld (t=0, X=6)</td>\n<td>9.9746e-06</td>\n<td>9.9402e-06</td>\n<td>3.4473e-03</td>\n</tr>\n<tr>\n<td>benthic_prey (t=0, X=21)</td>\n<td>2.1760e-03</td>\n<td>2.1760e-03</td>\n<td>2.1544e-07</td>\n</tr>\n</tbody>\n</table>\n<p>This is running for a single time step; I need to verify that the column depths and such match, and then I'll try to dig in to the individual components that make up the biomass computation to see if I can figure out what is causing these diffs</p>",
        "id": 50117,
        "sender_full_name": "Michael Levy",
        "timestamp": 1644272569
    },
    {
        "content": "<p>Okay, I think I fixed the above issue with</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/feisty/core/process.py b/feisty/core/process.py</span>\n<span class=\"gh\">index 4b9da4c..7b2c491 100644</span>\n<span class=\"gd\">--- a/feisty/core/process.py</span>\n<span class=\"gi\">+++ b/feisty/core/process.py</span>\n<span class=\"gu\">@@ -60,7 +60,7 @@ def compute_t_frac_pelagic(</span>\n             t_frac_pelagic[i, :] = xr.where(\n                 domain.ocean_depth &lt; PI_be_cutoff,\n                 prey_pelagic / (prey_pelagic + prey_demersal),\n<span class=\"gd\">-                1.0,</span>\n<span class=\"gi\">+                0.0,</span>\n             )\n</code></pre></div>\n<p>Does this make sense? If we're deeper than the Benthic-pelagic coupling cutoff, <code>t_frac_pelagic</code> is 0 instead of 1?</p>",
        "id": 50120,
        "sender_full_name": "Michael Levy",
        "timestamp": 1644275809
    },
    {
        "content": "<p>biomass comparison from the idealized testcase with the above fix:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf (t=266, X=4)</td>\n<td>1.3672e-05</td>\n<td>1.3672e-05</td>\n<td>2.4781e-16</td>\n</tr>\n<tr>\n<td>Sp (t=0, X=0)</td>\n<td>9.9978e-06</td>\n<td>9.9978e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd (t=0, X=0)</td>\n<td>9.9978e-06</td>\n<td>9.9978e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf (t=263, X=4)</td>\n<td>2.5706e-04</td>\n<td>2.5706e-04</td>\n<td>2.1088e-16</td>\n</tr>\n<tr>\n<td>Mp (t=193, X=4)</td>\n<td>1.7676e-04</td>\n<td>1.7676e-04</td>\n<td>3.0669e-16</td>\n</tr>\n<tr>\n<td>Md (t=320, X=19)</td>\n<td>1.7271e-04</td>\n<td>1.7271e-04</td>\n<td>4.7083e-16</td>\n</tr>\n<tr>\n<td>Lp (t=157, X=4)</td>\n<td>1.4652e-04</td>\n<td>1.4652e-04</td>\n<td>5.5499e-16</td>\n</tr>\n<tr>\n<td>Ld (t=349, X=5)</td>\n<td>4.0468e-05</td>\n<td>4.0468e-05</td>\n<td>4.3537e-15</td>\n</tr>\n<tr>\n<td>benthic_prey (t=290, X=4)</td>\n<td>2.9726e-01</td>\n<td>2.9726e-01</td>\n<td>2.6144e-15</td>\n</tr>\n</tbody>\n</table>\n<p>and for the 3-location test:</p>\n<table>\n<thead>\n<tr>\n<th>group</th>\n<th>Matlab Value</th>\n<th>Python Value</th>\n<th>Rel Err</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Sf (t=298, X=0)</td>\n<td>1.2378e-05</td>\n<td>1.2378e-05</td>\n<td>2.7371e-16</td>\n</tr>\n<tr>\n<td>Sp (t=0, X=0)</td>\n<td>9.9989e-06</td>\n<td>9.9989e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Sd (t=0, X=0)</td>\n<td>9.9989e-06</td>\n<td>9.9989e-06</td>\n<td>0.0000e+00</td>\n</tr>\n<tr>\n<td>Mf (t=61, X=0)</td>\n<td>4.1794e-05</td>\n<td>4.1794e-05</td>\n<td>3.2427e-16</td>\n</tr>\n<tr>\n<td>Mp (t=4, X=2)</td>\n<td>1.5865e-05</td>\n<td>1.5865e-05</td>\n<td>2.1356e-16</td>\n</tr>\n<tr>\n<td>Md (t=258, X=0)</td>\n<td>1.5325e-04</td>\n<td>1.5325e-04</td>\n<td>3.5373e-16</td>\n</tr>\n<tr>\n<td>Lp (t=187, X=2)</td>\n<td>3.0789e-04</td>\n<td>3.0789e-04</td>\n<td>3.5214e-16</td>\n</tr>\n<tr>\n<td>Ld (t=214, X=1)</td>\n<td>2.0739e-05</td>\n<td>2.0739e-05</td>\n<td>1.7971e-15</td>\n</tr>\n<tr>\n<td>benthic_prey (t=327, X=1)</td>\n<td>2.9618e-01</td>\n<td>2.9618e-01</td>\n<td>1.6868e-15</td>\n</tr>\n</tbody>\n</table>",
        "id": 50121,
        "sender_full_name": "Michael Levy",
        "timestamp": 1644275971
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span>  In the configuration I use that assumes large pelagic fish are pelagic specialists,  t_frac_pelagic = 1 for SF, MF, SP, MP, LP, SD always; and t_frac_pelagic = 0 for MD always. The Benthic-Pelagic cutoff only matters for LD. So if we're deeper than the Benthic-pelagic coupling cutoff,  t_frac_pelagic is 0, otherwise the prey densities are used to calculate it.</p>",
        "id": 50442,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1644525075
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span>  -- perfect! In the python code, <code>Ld</code> is the only fish that calls <code>compute_t_frac_pelagic()</code> and the change I made was to set <code>t_frac_pelagic = 0</code> if the column is deeper than the cutoff because the original code was setting it to 1 in those cases.</p>",
        "id": 50443,
        "sender_full_name": "Michael Levy",
        "timestamp": 1644525179
    },
    {
        "content": "<p>A status update, though plots won't be ready until tomorrow -- I updated the python code to accept monthly forcing instead of daily, and since the forcing is from mid-month the first 16 days will use the \"12:00p on January 16th\" values rather than extrapolating from the mid-January and mid-February values. So I expect the python solution to be similar to the matlab solution, but not within round-off. Some first tests seem to bear that out, but when I was trying to get the two to match closely I had modified the time axis to match what matlab uses when it does the interpolation to generate the daily forcing (30 day intervals, starting on day 15 rather than true mid-month).</p>\n<p>For the interpolation, what I ended up doing is adding a <code>_forcing_time</code> to the offline driver class that is the first time level in the forcing when that is later than <code>self.time</code>, the last forcing level when that is earlier than <code>self.time</code>, and <code>self.time</code> everywhere else:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_forcing_time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">forcing</span><span class=\"p\">[</span><span class=\"s2\">\"time\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">forcing</span><span class=\"p\">[</span><span class=\"s2\">\"time\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"p\">)</span>\n          <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_forcing_time</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_forcing_time</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">forcing</span><span class=\"p\">[</span><span class=\"s2\">\"time\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_forcing_time</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">forcing</span><span class=\"p\">[</span><span class=\"s2\">\"time\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>The interpolation at time step <code>n</code> is then <code>gcm_data_t = self.forcing.interp(time=forcing_t)</code>, where <code>forcing_t = self._forcing_time[n]</code>.</p>\n<p>The last thing to do before committing these changes is to update the default settings so they match the FOSI case (I'll use <code>settings_in</code> for the other test cases). Once that's done, it'll be time to turn to performance. I don't want to try to run the FOSI spin-up when it's taking 90 minutes per year (16 SYPD).</p>",
        "id": 53047,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648784192
    },
    {
        "content": "<p>Looking at the code snippet, I think I should change the API of <code>_compute_tendency</code> so the call is <code>dsdt = self._compute_tendency(n, state_t)</code> instead of <code>dsdt = self._compute_tendency(self.time[n], self._forcing_time[n], state_t)</code>... so pretend that's already in place :)</p>",
        "id": 53048,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648784374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"122\">@Colleen Petrik</span> and <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> -- As mentioned in my last post, there are a couple of differences in how the python and matlab code handle forcing:</p>\n<ol>\n<li>matlab extrapolates from mid-Jan and mid-Feb to determine forcing in early January, whereas python uses the mid-January value until we in a date between the January / February forcings</li>\n<li>matlab treats the forcing as coming from days 15, 45, 75, etc. while POP uses the true mid-month (15.5, 45, 74.5, etc)</li>\n</ol>\n<p>With these differences is mind, I ran one year using the first year of FOSI forcing. The intial conditions were spun-up by repeating this forcing for 150 or 200 years, so the expectation is that the system is close to equilibrium.</p>\n<p>I picked two grid cells to plot biomass from, one where the the two model solutions look pretty similar and one where there are clear differences. Here's the side-by-side comparison of what I think is a sign that the two models are behaving similarly (I picked this point because I was looking for (a) biomass values larger than <code>1e-7</code> in all groups, and (b) small differences between python and matlab):</p>\n<p><a href=\"/user_uploads/2/2e/12jIQ9SU8rhVmucoyXC7rlsn/biomass-X-is-55000.png\">biomass-X-is-55000.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/2e/12jIQ9SU8rhVmucoyXC7rlsn/biomass-X-is-55000.png\" title=\"biomass-X-is-55000.png\"><img src=\"/user_uploads/2/2e/12jIQ9SU8rhVmucoyXC7rlsn/biomass-X-is-55000.png\"></a></div><p>Here are the absolute and relative errors at the same point:</p>\n<p><a href=\"/user_uploads/2/7e/bXmxxj4b14epq0nY8Mws85AY/err-X-is-55000.png\">err-X-is-55000.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/7e/bXmxxj4b14epq0nY8Mws85AY/err-X-is-55000.png\" title=\"err-X-is-55000.png\"><img src=\"/user_uploads/2/7e/bXmxxj4b14epq0nY8Mws85AY/err-X-is-55000.png\"></a></div><p>For the column showing differences between the two, I looked at the grid cell reporting the largest relative error for <code>Sf</code>, <code>Sp</code>, and <code>Sd</code> (probably not a coincidence that all three maximums occur in the same location). Here's the side-by-side of biomass:</p>\n<p><a href=\"/user_uploads/2/59/ZYO8F_yA2X-WW3gPwB5jLTHN/biomass-X-is-15633.png\">biomass-X-is-15633.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/59/ZYO8F_yA2X-WW3gPwB5jLTHN/biomass-X-is-15633.png\" title=\"biomass-X-is-15633.png\"><img src=\"/user_uploads/2/59/ZYO8F_yA2X-WW3gPwB5jLTHN/biomass-X-is-15633.png\"></a></div><p>and the error plots:</p>\n<p><a href=\"/user_uploads/2/ff/2t1ATKsdrFgADCOdJ7-WAnqb/err-X-is-15633.png\">err-X-is-15633.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/ff/2t1ATKsdrFgADCOdJ7-WAnqb/err-X-is-15633.png\" title=\"err-X-is-15633.png\"><img src=\"/user_uploads/2/ff/2t1ATKsdrFgADCOdJ7-WAnqb/err-X-is-15633.png\"></a></div><p>It's interesting to me that the three small classes all show a big drop early in the matlab run, followed by a recovery to the equilibrium state, while the python run stays in equilibrium. My take is that this is a response to the difference in interpolation techniques prior to Jan 15, but that all-in-all it's a sign that the python code is running well.</p>",
        "id": 53089,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648829129
    },
    {
        "content": "<p>And two more plots, because I think they're interesting. biomass in the column with the biggest errors from the medium classes:</p>\n<p><a href=\"/user_uploads/2/9d/mizjZQk_v2gaGYdzwKOdcLea/biomass-X-is-11677.png\">biomass-X-is-11677.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/9d/mizjZQk_v2gaGYdzwKOdcLea/biomass-X-is-11677.png\" title=\"biomass-X-is-11677.png\"><img src=\"/user_uploads/2/9d/mizjZQk_v2gaGYdzwKOdcLea/biomass-X-is-11677.png\"></a></div><p>The error seems to be largest where the huge drop in <code>Md</code> (and smaller drop in <code>Mf</code>) occur. It would be interesting to find out what's causing the abrupt drop (and just as abrupt recovery).</p>\n<p>Here's the column with the largest errors in the benthic prey:</p>\n<p><a href=\"/user_uploads/2/ac/ue2qA9D4Vlu3fIknM2n67JrU/biomass-X-is-76989.png\">biomass-X-is-76989.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/ac/ue2qA9D4Vlu3fIknM2n67JrU/biomass-X-is-76989.png\" title=\"biomass-X-is-76989.png\"><img src=\"/user_uploads/2/ac/ue2qA9D4Vlu3fIknM2n67JrU/biomass-X-is-76989.png\"></a></div><p>It looks like there are only 6 classes plotted because <code>Sp</code>, <code>Mp</code>, and <code>Lp</code> are all order <code>1e-19</code> or so.</p>\n<p>The column with the largest errors in the large class aren't very interesting (<code>Lp</code> is very small, and the error in <code>Ld</code> is roughly <code>1e-2</code>)</p>",
        "id": 53094,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648829808
    },
    {
        "content": "<p>I did a little profiling: about 82% of the python runtime is spent interpolating the forcing field (!!) and only ~8% is spent actually computing the tendency. It turns out an easy way to cut this down by a factor of 10 is to reduce the size of the time dimension from 68 years to 1 year... so I think a smart <code>.isel(time=...)</code> in <code>gcm_data_t = self.forcing.interp(time=forcing_t)</code> will be a big savings.</p>",
        "id": 53113,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648846039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"31\">@Keith Lindsay</span> helped find the <code>assume_sorted</code> flag in xarray's <code>interp()</code> function, and instead of 90+ minutes, I'm down to 7.5 minutes per year! (I think matlab is 1.5 minutes per year, so still 5x slower). Here's the latest timing data, without breaking down each call in <code>compute_tendencies()</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>Elapsed time for init: 49.47\nElapsed time for post_data: 317.51\nElapsed time for interp_forcing: 9.55\nElapsed time for compute_tendency: 79.63\nElapsed time for solve: 456.21\nTotal (excluding solve, which wraps the rest): 456.15\nCPU times: user 1min 41s, sys: 1min 47s, total: 3min 29s\nWall time: 7min 36s\n</code></pre></div>\n<p><code>init</code> is copying the prognostic variables into <code>state_t</code> and setting up the arrays for output; <code>post_data</code> is copying <code>state_t</code> back into <code>biomass</code> and updating the diagnostics in the <code>offline_driver</code> object (so copying from one Dataset to another). I can look at speeding up that step next week</p>",
        "id": 53126,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648854300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , this seems like a very good, important step. I am really concerned about the performance, however.</p>",
        "id": 53128,
        "sender_full_name": "Matt Long",
        "timestamp": 1648857554
    },
    {
        "content": "<p>The <code>post_data</code> stage is clearly the next one to target, and I have a few ideas. Namely, could we avoid memory copies by doing intermediate computations directly into the diagnostic data arrays? I’ll look into it Monday</p>",
        "id": 53130,
        "sender_full_name": "Michael Levy",
        "timestamp": 1648872854
    },
    {
        "content": "<p>I was able to greatly reduce the time spent in <code>post_data</code> by not posting most of the diagnostic output:</p>\n<div class=\"codehilite\"><pre><span></span><code>Elapsed time for init: 35.61\nElapsed time for post_data: 15.64\nElapsed time for interp_forcing: 6.85\nElapsed time for compute_tendency: 62.31\nElapsed time for solve: 120.45\nTotal (excluding solve, which wraps the rest): 120.41\nCPU times: user 1min 7s, sys: 36.1 s, total: 1min 43s\nWall time: 2min\n</code></pre></div>\n<p>So this is closer in line to matlab timing (90 seconds, but that excludes some of the matlab initialization), but the bulk of the savings comes about by not copying <code>T_habitat</code>, <code>ingestion_rate</code>, <code>predation_flux</code>, <code>predation_rate</code>, <code>metabolism_rate'</code>, <code>mortality_rate</code>, <code>energy_avail_rate</code>, <code>growth_rate</code>, <code>reproduction_rate</code>, <code>recruitment_flux</code>, <code>fish_catch_rate</code>, <code>encounter_rate_link</code>, <code>encounter_rate_total</code>, <code>consumption_rate_max_pred</code>, or <code>consumption_rate_link</code> into a Dataset every time step... which means those diagnostics are not available after the run</p>",
        "id": 53181,
        "sender_full_name": "Michael Levy",
        "timestamp": 1649101497
    },
    {
        "content": "<p>Actually, the above timing just commented out the data copy into each time slice. If I actually remove the diagnostics from the dataset (e.g. don't initialize the memory for them), we actually meet the matlab performance numbers!</p>\n<div class=\"codehilite\"><pre><span></span><code>Elapsed time for init: 2.19\nElapsed time for post_data: 14.93\nElapsed time for interp_forcing: 6.89\nElapsed time for compute_tendency: 61.97\nElapsed time for solve: 86.02\nTotal (excluding solve, which wraps the rest): 85.98\nCPU times: user 1min 3s, sys: 7.08 s, total: 1min 10s\nWall time: 1min 26s\n</code></pre></div>",
        "id": 53182,
        "sender_full_name": "Michael Levy",
        "timestamp": 1649101607
    },
    {
        "content": "<p>I extended the above setup to a 50 year run (trying to do the FOSI spinup run, so forcing is just cycling over the first year), and the overhead is pretty large:</p>\n<div class=\"codehilite\"><pre><span></span><code>Elapsed time for init: 262.06\nElapsed time for post_data: 1750.98\nElapsed time for interp_forcing: 2588.41\nElapsed time for compute_tendency: 9191.34\nElapsed time for solve: 13801.51\nTotal (excluding solve, which wraps the rest): 13792.79\nCPU times: user 1h 12min 17s, sys: 2h 9min 13s, total: 3h 21min 31s\nWall time: 3h 50min 1s\n</code></pre></div>\n<p>It's nice to see the 1-year run in the 90-second range, but I really want to maintain that throughput for longer runs. The numbers above average out to ~270 seconds / year, or 3x slower, and I assume it boils down to memory management because we are allocating a ton of memory upfront.</p>\n<p>I'm thinking about refactoring the offline driver to do everything in one-year chunks (like the matlab code)... I'm picturing a cycle of</p>\n<ol>\n<li>initialize the run</li>\n<li>run for a year</li>\n<li>append output into driver Dataset via <a href=\"https://xarray.pydata.org/en/stable/generated/xarray.concat.html\"><code>xr.concat()</code></a></li>\n<li>re-initialize for next year (copy current biomass state into initial condition, update time dimension on output, etc)</li>\n<li>goto (2)</li>\n</ol>\n<p>The good news is that the results look promising. Here's a time series of <code>biomass</code> over the full 50 years at one of the columns I've been using to check my run, with one year of the already-spun-up matlab output for comparison:</p>\n<p><a href=\"/user_uploads/2/d6/X6FBQMpPDhDxK3nSYYkOD6dk/50-year-spinup-compared-to-spun-up-matlab.png\">50-year-spinup-compared-to-spun-up-matlab.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/d6/X6FBQMpPDhDxK3nSYYkOD6dk/50-year-spinup-compared-to-spun-up-matlab.png\" title=\"50-year-spinup-compared-to-spun-up-matlab.png\"><img src=\"/user_uploads/2/d6/X6FBQMpPDhDxK3nSYYkOD6dk/50-year-spinup-compared-to-spun-up-matlab.png\"></a></div><p>And then here is the last year of the spinup from the same column (with the same matlab plot for comparison):</p>\n<p><a href=\"/user_uploads/2/ea/cydMXrw2eSy0MoFpN4qBSw42/50th-year-of-spinup-compared-to-spun-up-matlab.png\">50th-year-of-spinup-compared-to-spun-up-matlab.png</a> </p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/ea/cydMXrw2eSy0MoFpN4qBSw42/50th-year-of-spinup-compared-to-spun-up-matlab.png\" title=\"50th-year-of-spinup-compared-to-spun-up-matlab.png\"><img src=\"/user_uploads/2/ea/cydMXrw2eSy0MoFpN4qBSw42/50th-year-of-spinup-compared-to-spun-up-matlab.png\"></a></div><p>The big differences to my eye are</p>\n<ol>\n<li>benthic prey doesn't look like it's in equilibrium yet, so it's a little low</li>\n<li><code>Sd</code>, <code>Md</code>, and <code>Ld</code> are a little lower in the python run than the matlab, while <code>Sp</code>, <code>Mp</code>, and <code>Lp</code> are a little higher (much more noticeable in <code>Lp</code>, <code>Ld</code>, and <code>Md</code> than the other three fields)</li>\n</ol>",
        "id": 53218,
        "sender_full_name": "Michael Levy",
        "timestamp": 1649170315
    },
    {
        "content": "<p>I think you're plan regarding running year-by-year sounds reasonable, though I think you might be able to simply dump the data at some prescribed (i.e., annual) frequency in context of the time loop, rather than hard coding a model stop/start.</p>",
        "id": 53249,
        "sender_full_name": "Matt Long",
        "timestamp": 1649178335
    },
    {
        "content": "<p>My hope is to preserve the the <code>testcase.run(nt)</code> interface, I was just picturing a loop under the covers to make sure we don't exceed bounds when copying into the numpy arrays. \"Dumping output\" (maybe just creating a list of datasets that a user can merge after the fact?) makes sense, and maybe we could work that in without really messing with anything else in <code>_solve()</code></p>",
        "id": 53266,
        "sender_full_name": "Michael Levy",
        "timestamp": 1649181134
    },
    {
        "content": "<p>I was thinking that if the conditional is met (i.e., time to write out a file), the index into the memory buffer could be reset and the time-stepping loop could just proceed. So something like <code>time_step_per_file</code> could be set...  Another issues relates to temporal averaging. We are still writing time-step level output, right? Ideally we would decouple the timestep from the output frequency and enable temporal averaging. Not clear to me that this is a priority.</p>",
        "id": 53271,
        "sender_full_name": "Matt Long",
        "timestamp": 1649185128
    },
    {
        "content": "<p>Okay, I broke <code>self._ds</code> into a list of datasets with a max length of <code>self._max_output_time_dim</code> (default set to 365, and I haven't tried adjusting it); this lets the model run much faster, but requires an <code>xr.concat()</code> at the end which can be time consuming. Bottom line, the 50-year run that took 3 hours 50 minutes last night is down to an hour and a half (so 108 seconds per year)</p>",
        "id": 53288,
        "sender_full_name": "Michael Levy",
        "timestamp": 1649194221
    },
    {
        "content": "<p>that seems reasonable. I think if we write single var files, the <code>concat</code> step can be skipped...but that's a detail. Parallelization should make dramatic gains in performance.</p>",
        "id": 53290,
        "sender_full_name": "Matt Long",
        "timestamp": 1649249942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"10\">@Michael Levy</span> , why are the netcdf files so large? For example, the 4yr FOSI file we created today is 9.02GB, while my netcdfs from the Matlab version for the full 62 years of the FOSI are 10.08GB.</p>",
        "id": 55656,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1653514628
    },
    {
        "content": "<p>whoa, that's a big difference. I think we're spitting stuff out in double precision, while matlab might be writing single precision, but that would only be a factor of 2</p>",
        "id": 55657,
        "sender_full_name": "Michael Levy",
        "timestamp": 1653514727
    },
    {
        "content": "<p>but there are 9 functional types, and 85000 grid cells, so 1 year (365 daily output) would be <code>8*9*85000*365</code> = 2.2 billion bytes per year... maybe matlab is writing compressed netcdf?</p>",
        "id": 55658,
        "sender_full_name": "Michael Levy",
        "timestamp": 1653514814
    },
    {
        "content": "<p>I did notice that my 62 year FOSI run created a 110GB netcdf file, and that seemed a little extreme...</p>",
        "id": 55659,
        "sender_full_name": "Michael Levy",
        "timestamp": 1653514887
    },
    {
        "content": "<p>Yes, that's a bit extreme! I realized the difference is that I save monthly means, not daily.</p>",
        "id": 55661,
        "sender_full_name": "Colleen Petrik",
        "timestamp": 1653524846
    },
    {
        "content": "<p>I can add a flag to the settings file to compute monthly means, that should be pretty easy with xarray</p>",
        "id": 55696,
        "sender_full_name": "Michael Levy",
        "timestamp": 1653578834
    }
]