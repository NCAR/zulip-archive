[
    {
        "content": "<p>I am trying to merge some old analysis code in f90 into a workflow. I have it working in a python script invoked from the command line, but cannot get it to work in a notebook. Looking for guidance on how to inform jupyter where to find the resulting shared object file.</p>\n<p>Here is a very simplified example exhibiting the same problematic behavior:</p>\n<p>The fortran code:<br>\nfunction hello(n) result(err)<br>\ninteger :: err<br>\ninteger, intent(in) :: n<br>\nerr = 0<br>\nif ( n &gt; 0 ) then<br>\n   do i=1,n<br>\n      print *,'hello',i<br>\n   enddo<br>\n   err = 1<br>\nendif<br>\nend function hello</p>\n<p>I compile with f2py:<br>\npython -m numpy.f2py -c fhello.f90 -m fhello<br>\n[a bunch of warning messages result, but no fatal errors, following file produced:]<br>\n<a href=\"http://fhello.cpython-37m-x86_64-linux-gnu.so\" target=\"_blank\" title=\"http://fhello.cpython-37m-x86_64-linux-gnu.so\">fhello.cpython-37m-x86_64-linux-gnu.so</a></p>\n<p>works correctly from the command line:<br>\n(analysis) bryan@casper21: python -c \"import fhello ; fhello.hello(2)\"<br>\n hello           1<br>\n hello           2</p>\n<p>In a Notebook with source in the same directory:<br>\nimport fhello</p>\n<p>produces the following error:</p>\n<hr>\n<p>ImportError                               Traceback (most recent call last)<br>\n&lt;ipython-input-1-5173bb57af75&gt; in &lt;module&gt;<br>\n----&gt; 1 import fhello</p>\n<p>ImportError: libifport.so.5: cannot open shared object file: No such file or directory</p>",
        "id": 9430,
        "sender_full_name": "Frank Bryan",
        "timestamp": 1590174197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"44\">@Frank Bryan</span>, what is the output of </p>\n<ul>\n<li>\n<p><code>echo $LD_LIBRARY_PATH</code>?</p>\n</li>\n<li>\n<p><code>module list</code>?</p>\n</li>\n</ul>",
        "id": 9438,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1590174498
    },
    {
        "content": "<p>It's likely that Conda packages and system libraries are colliding</p>",
        "id": 9441,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1590174568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"44\">@Frank Bryan</span>, you may need to do </p>\n<div class=\"codehilite\"><pre><span></span>module purge\nconda activate my-env\n</pre></div>\n\n\n<p>before you compile.</p>",
        "id": 9442,
        "sender_full_name": "Matt Long",
        "timestamp": 1590174607
    },
    {
        "content": "<p>analysis) bryan@casper21: echo $LD_LIBRARY_PATH<br>\n/glade/u/apps/dav/opt/openmpi/3.1.4/intel/18.0.5/lib:/glade/u/apps/opt/intel/2018u4/compilers_and_libraries/linux/lib/intel64:/glade/u/apps/dav/opt/usr/lib64<br>\n(analysis) bryan@casper21: module list</p>\n<p>Currently Loaded Modules:<br>\n  1) intel/18.0.5          3) openmpi/3.1.4   5) ncarenv/1.3   7) ncview/2.1.7   9) idl/8.7.2<br>\n  2) ncarcompilers/0.5.0   4) netcdf/4.7.3    6) nco/4.7.9     8) ncl/6.6.2</p>",
        "id": 9444,
        "sender_full_name": "Frank Bryan",
        "timestamp": 1590174617
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"44\">Frank Bryan</span>, you may need to do </p>\n</blockquote>\n<p>module purge <br>\nconda activate my-env</p>\n<div class=\"codehilite\"><pre><span></span>before you compile.\n</pre></div>\n\n\n<p>Try this <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 9445,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1590174654
    },
    {
        "content": "<p>See here: <a href=\"https://github.com/matt-long/remap_z_to_sigma/tree/master\" target=\"_blank\" title=\"https://github.com/matt-long/remap_z_to_sigma/tree/master\">https://github.com/matt-long/remap_z_to_sigma/tree/master</a><br>\nfor an example of where I do something like this.</p>",
        "id": 9446,
        "sender_full_name": "Matt Long",
        "timestamp": 1590174681
    },
    {
        "content": "<p>though it looks like I neglected appropriate environment conditioning in my build script:<br>\n<a href=\"https://github.com/matt-long/remap_z_to_sigma/blob/master/remap_z/build.sh\" target=\"_blank\" title=\"https://github.com/matt-long/remap_z_to_sigma/blob/master/remap_z/build.sh\">https://github.com/matt-long/remap_z_to_sigma/blob/master/remap_z/build.sh</a></p>",
        "id": 9447,
        "sender_full_name": "Matt Long",
        "timestamp": 1590174726
    },
    {
        "content": "<p>Worked (mostly). Thanks <span class=\"user-mention\" data-user-id=\"13\">@Anderson Banihirwe</span> .</p>\n<p>Not an issue for my real problem, but where does output to stdout from the f90 code go ? Doesn't show up in the output cell but the return code is correct so I think it worked.</p>",
        "id": 9451,
        "sender_full_name": "Frank Bryan",
        "timestamp": 1590174935
    },
    {
        "content": "<p>Frank, prior to compiling the .f90 code with f2py, did you use f2py to generate a .pyf header file, then update the header file with <code>intent(&lt;in/out/inout/hide&gt;)</code> for each variable?</p>",
        "id": 18566,
        "sender_full_name": "Alea Kootz",
        "timestamp": 1601595977
    },
    {
        "content": "<p>That was a long time ago and I ended up moving to a pure python implementation, so I'm not remembering well, but it looks like no, I just compile the Fortran source with<br>\npython -m numpy.f2py -c land_fillin.f90 -m land_fillin</p>\n<p>No pyf file was required. My F90 subroutine already had all arguments declared with intent</p>",
        "id": 18573,
        "sender_full_name": "Frank Bryan",
        "timestamp": 1601602079
    }
]