[
    {
        "content": "<p>I'm trying to use the eofs python package (<a href=\"https://ajdawson.github.io/eofs/latest/api/eofs.xarray.html\">https://ajdawson.github.io/eofs/latest/api/eofs.xarray.html</a>) with a dask DataArray, which is apparently supported (see <a href=\"https://github.com/ajdawson/eofs/pull/109\">https://github.com/ajdawson/eofs/pull/109</a>). The following shows the sequence of commands:<br>\n<a href=\"/user_uploads/2/7d/olaXu9pqK9d1AZ8f51mmnsyc/Screen-Shot-2022-02-15-at-3.24.45-PM.png\">Screen-Shot-2022-02-15-at-3.24.45-PM.png</a> <br>\nThis returns the error:  <br>\nValueError: operands could not be broadcast together with shapes (20080, 20080) (1, nan)<br>\nIt's not clear where the nan dimension is coming from. The error goes away if the dask DataArray is first loaded into an xarray DataArray. Has anyone had success using eofs with dask?</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/7d/olaXu9pqK9d1AZ8f51mmnsyc/Screen-Shot-2022-02-15-at-3.24.45-PM.png\" title=\"Screen-Shot-2022-02-15-at-3.24.45-PM.png\"><img src=\"/user_uploads/2/7d/olaXu9pqK9d1AZ8f51mmnsyc/Screen-Shot-2022-02-15-at-3.24.45-PM.png\"></a></div>",
        "id": 50639,
        "sender_full_name": "Stephen Yeager",
        "timestamp": 1644964603
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"34\">@Stephen Yeager</span>, I believe this is a bug/ an incompatibility of eofs with dask... eofs is slicing the data <a href=\"https://github.com/ajdawson/eofs/blob/603ed8ed86e606fcf8e69a9edc756f81544d4f93/lib/eofs/standard.py#L158\">here</a> using a <a href=\"https://github.com/ajdawson/eofs/blob/603ed8ed86e606fcf8e69a9edc756f81544d4f93/lib/eofs/standard.py#L156\">dask array as a slice</a></p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">ipdb</span><span class=\"o\">&gt;</span> <span class=\"bp\">self</span>\n<span class=\"o\">&lt;</span><span class=\"n\">eofs</span><span class=\"o\">.</span><span class=\"n\">standard</span><span class=\"o\">.</span><span class=\"n\">Eof</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x15a7a31c0</span><span class=\"o\">&gt;</span>\n<span class=\"n\">ipdb</span><span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n<span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">reshape</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">56375</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">56375</span><span class=\"p\">),</span> <span class=\"n\">chunktype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"o\">&gt;</span>\n<span class=\"n\">ipdb</span><span class=\"o\">&gt;</span> <span class=\"n\">nonMissingIndex</span>\n<span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">nan</span><span class=\"p\">,),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">int64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">nan</span><span class=\"p\">,),</span> <span class=\"n\">chunktype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"o\">&gt;</span>\n<span class=\"n\">ipdb</span><span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[:,</span> <span class=\"n\">nonMissingIndex</span><span class=\"p\">]</span>\n<span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">slice_with_int_dask_array_aggregate</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"n\">nan</span><span class=\"p\">),</span> <span class=\"n\">chunktype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>Notice how after slicing the data, our shape got changed from <code>(36,56375)</code> -&gt; <code>(36, nan)</code>. I am not sure how this used to work when it was first introduced in <code>eofs</code> but It appears that if you eagerly evaluate the slice, things seem to work as expected: </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">ipdb</span><span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[:,</span> <span class=\"n\">nonMissingIndex</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()]</span>\n<span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">&lt;</span><span class=\"n\">getitem</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">36</span><span class=\"p\">,</span> <span class=\"mi\">25996</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float64</span><span class=\"p\">,</span> <span class=\"n\">chunksize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"mi\">25996</span><span class=\"p\">),</span> <span class=\"n\">chunktype</span><span class=\"o\">=</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"o\">&gt;</span>\n</code></pre></div>",
        "id": 50645,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1644967185
    },
    {
        "content": "<p>I recommend opening an issue on the eofs issue tracker. If you are looking for a reproducible example, here is one:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">13</span><span class=\"p\">]:</span> <span class=\"kn\">import</span> <span class=\"nn\">eofs</span><span class=\"o\">,</span> <span class=\"nn\">xarray</span> <span class=\"k\">as</span> <span class=\"nn\">xr</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]:</span> <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">tutorial</span><span class=\"o\">.</span><span class=\"n\">open_dataset</span><span class=\"p\">(</span><span class=\"s2\">\"rasm\"</span><span class=\"p\">,</span> <span class=\"n\">chunks</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"time\"</span><span class=\"p\">:</span> <span class=\"mi\">18</span><span class=\"p\">})</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">15</span><span class=\"p\">]:</span> <span class=\"n\">solver</span> <span class=\"o\">=</span> <span class=\"n\">eofs</span><span class=\"o\">.</span><span class=\"n\">xarray</span><span class=\"o\">.</span><span class=\"n\">Eof</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">Tair</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 50648,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1644967379
    },
    {
        "content": "<p>Ooh. never mind... It's probably not a bug <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>... If you avoid chunking along the <code>time</code> dimension, it seems to work...</p>",
        "id": 50650,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1644967621
    },
    {
        "content": "<p>You may want to chunk along the <code>lat</code> and <code>lon</code> dimensions instead</p>",
        "id": 50651,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1644967685
    },
    {
        "content": "<p>Good suggestion!  Thanks.</p>",
        "id": 50652,
        "sender_full_name": "Stephen Yeager",
        "timestamp": 1644967753
    },
    {
        "content": "<p>I'm not able to get eofs.xarray.Eof() to work with a 2GB dask DataArray, even if I avoid chunking in <code>time</code>. If you want to have a look, here's a notebook that isolates the problem:  /glade/u/home/yeager/analysis/python/toshare/dask_eof.ipynb</p>",
        "id": 50707,
        "sender_full_name": "Stephen Yeager",
        "timestamp": 1645035674
    }
]