[
    {
        "content": "<p>I am attempting to parallelize three calls to <code>pcolormesh</code> using the Python <code>multiprocessing</code> module. Here is some pseduo-code:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">setup_ax</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">):</span>\n  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">111</span><span class=\"p\">,</span><span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"n\">ccrs</span><span class=\"o\">.</span><span class=\"n\">LambertConformal</span><span class=\"p\">(</span><span class=\"n\">central_longitude</span><span class=\"o\">=-</span><span class=\"mf\">97.5</span><span class=\"p\">,</span><span class=\"n\">central_latitude</span><span class=\"o\">=</span><span class=\"mf\">38.5</span><span class=\"p\">),</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">idstr</span><span class=\"p\">)</span>\n  <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">add_feature</span><span class=\"p\">(</span><span class=\"n\">cfeature</span><span class=\"o\">.</span><span class=\"n\">COASTLINE</span><span class=\"o\">.</span><span class=\"n\">with_scale</span><span class=\"p\">(</span><span class=\"s1\">'50m'</span><span class=\"p\">),</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">add_feature</span><span class=\"p\">(</span><span class=\"n\">cfeature</span><span class=\"o\">.</span><span class=\"n\">STATES</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">add_feature</span><span class=\"p\">(</span><span class=\"n\">cfeature</span><span class=\"o\">.</span><span class=\"n\">BORDERS</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plot_comp</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span><span class=\"n\">ax</span><span class=\"p\">,</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"n\">minval</span><span class=\"p\">,</span><span class=\"n\">cmap</span><span class=\"p\">,</span><span class=\"n\">norm</span><span class=\"p\">):</span>\n  <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">pcolormesh</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">lon0</span><span class=\"p\">,</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">lat0</span><span class=\"p\">,</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s1\">'z0'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s1\">'z0'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"n\">minval</span><span class=\"p\">),</span><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ccrs</span><span class=\"o\">.</span><span class=\"n\">PlateCarree</span><span class=\"p\">(),</span><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">cmap</span><span class=\"p\">,</span><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"n\">norm</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"n\">ax1</span> <span class=\"o\">=</span> <span class=\"n\">setup_ax</span><span class=\"p\">(</span><span class=\"s1\">'ax1'</span><span class=\"p\">)</span>\n<span class=\"n\">ax2</span> <span class=\"o\">=</span> <span class=\"n\">setup_ax</span><span class=\"p\">(</span><span class=\"s1\">'ax2'</span><span class=\"p\">)</span>\n<span class=\"n\">ax3</span> <span class=\"o\">=</span> <span class=\"n\">setup_ax</span><span class=\"p\">(</span><span class=\"s1\">'ax3'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ax1</span><span class=\"p\">,</span><span class=\"n\">ax2</span><span class=\"p\">,</span><span class=\"n\">ax3</span><span class=\"p\">]</span>\n<span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'f1'</span><span class=\"p\">,</span><span class=\"s1\">'f2'</span><span class=\"p\">,</span><span class=\"s1\">'f3'</span><span class=\"p\">]</span>\n<span class=\"n\">mv</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">col1</span><span class=\"p\">,</span><span class=\"n\">col2</span><span class=\"p\">,</span><span class=\"n\">col3</span><span class=\"p\">]</span>\n<span class=\"n\">nm</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">norm1</span><span class=\"p\">,</span><span class=\"n\">norm2</span><span class=\"p\">,</span><span class=\"n\">norm3</span><span class=\"p\">]</span>\n\n<span class=\"n\">mp</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"n\">plot_comp</span><span class=\"p\">,[(</span><span class=\"n\">ds</span><span class=\"p\">,</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span><span class=\"p\">,</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">,</span><span class=\"n\">fn</span><span class=\"p\">,</span><span class=\"n\">mv</span><span class=\"p\">,</span><span class=\"n\">cm</span><span class=\"p\">,</span><span class=\"n\">nm</span><span class=\"p\">))])</span>\n</code></pre></div>\n<p>I get an error that I am having trouble interpreting:</p>\n<div class=\"codehilite\"><pre><span></span><code>Traceback (most recent call last):\n  File &quot;plot_mdv64_field.py&quot;, line 136, in &lt;module&gt;\n    results = mp.starmap(plot_comp,[(fileData,a,f,m,c,n) for a,f,m,c,n in tuple(zip(ax,fn,mv,cm,nm))])\n  File &quot;/home/dadriaan/.conda/envs/icicle/lib/python3.8/multiprocessing/pool.py&quot;, line 372, in starmap\n    return self._map_async(func, iterable, starmapstar, chunksize).get()\n  File &quot;/home/dadriaan/.conda/envs/icicle/lib/python3.8/multiprocessing/pool.py&quot;, line 771, in get\n    raise self._value\nmultiprocessing.pool.MaybeEncodingError: Error sending result: &#39;[&lt;matplotlib.collections.QuadMesh object at 0x7f7c5879ba90&gt;]&#39;. Reason: &#39;AttributeError(&quot;Can&#39;t pickle local object &#39;GeoAxes._pcolormesh_patched.&lt;locals&gt;.&lt;lambda&gt;&#39;&quot;)&#39;\n</code></pre></div>\n<p>I can only imagine this has something to do with figures or subplots, but I'm not quite sure in what way. I would expect <code>results</code> to just be a list of three objects returned from <code>pcolormesh</code> in <code>plot_comp()</code>, but I must be missing something.</p>\n<p>Does anyone have any insight? Thank you!</p>",
        "id": 52064,
        "sender_full_name": "Daniel Adriaansen",
        "timestamp": 1647273007
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234\">@Daniel Adriaansen</span>, I am not exactly sure what's going wrong, but in previous instances I've found that <code>matplotlib</code> is not thread-safe. I have used <code>dask.delayed</code> to successfully parallelize plotting. For example, see <a href=\"https://gist.github.com/matt-long/542bca173e77d8d2c455afc6ae20aab2\">here</a>.</p>",
        "id": 52072,
        "sender_full_name": "Matt Long",
        "timestamp": 1647278229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234\">@Daniel Adriaansen</span>:  <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span>'s suggestion of using Dask for parallelism is a good one.  Can I ask if this is \"new code\" that you have written and it is failing?  Or is this an old script that <em>used to work</em> but now does not?</p>",
        "id": 52078,
        "sender_full_name": "Kevin Paul",
        "timestamp": 1647285692
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> and <span class=\"user-mention\" data-user-id=\"8\">@Kevin Paul</span>! To answer Kevin's question- this is new code that I wrote and is failing. Are you mostly curious from a version standpoint (i.e. new versions breaking my old code)? Or is there something else that might be at play here?</p>\n<p>I have not used Dask before, and frankly misunderstood it as only useful for parallelizing problems with specific Pythonic data containers/objects like ndarray/DataArray and DataFrames. It turns out that Dask can be used by itself and this opens up a whole new world. From the Dask documentation here <a href=\"https://examples.dask.org/delayed.html\">https://examples.dask.org/delayed.html</a>, I see \"Systems like Dask.dataframe are built with Dask.delayed. If you have a problem that is paralellizable, but isn’t as simple as just a big array or a big dataframe, then dask.delayed may be the right choice for you.\"</p>\n<p>Thanks to <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> for the example and suggestion!</p>",
        "id": 52240,
        "sender_full_name": "Daniel Adriaansen",
        "timestamp": 1647446359
    },
    {
        "content": "<p>Hi Daniel, note that matplotlib is constrained to have one process/thread produce the plot itself.   Dask is best used to parallelize the data processing steps for the plot, but  the process of constructing the plot itself cannot be easily parallelized.</p>",
        "id": 52264,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1647449540
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"9\">@Brian Bonnlander</span>. <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> example above shows using dask.delayed for constructing the plot itself, presumably in parallel. Again, I am very new to Dask so I may not fully grasp what is going on in the example. Is using dask.delayed useful for calls to things like <code>contourf</code> and <code>pcolormesh</code>?</p>",
        "id": 52269,
        "sender_full_name": "Daniel Adriaansen",
        "timestamp": 1647450275
    },
    {
        "content": "<p>Hi Daniel, I just looked at the example and it seems related to data processing, not plotting.   I could be wrong, but everything I've read suggests that <code>contourf</code> and <code>pcolormesh</code> are non-parallizable.   Producing the data values for these plots are parallelizable using Dask, however.</p>",
        "id": 52284,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1647460220
    },
    {
        "content": "<p>OK thanks- I think I understand. What I am trying to do is get a single Python script to call three instances of <code>pcolormesh</code> simultaneously for three different plots (not the same plot). This would be equivalent to running three separate python scripts at the same time to call <code>pcolormesh</code>. Separate resources are used for each, but I just want to do it from a single script. I'm not actually interesting in parallellizing the work that's done within <code>pcolormesh</code>, but rather running multiple calls to those simultaneously on the same piece of hardware.</p>",
        "id": 52290,
        "sender_full_name": "Daniel Adriaansen",
        "timestamp": 1647461391
    },
    {
        "content": "<p>Ah, I see.  It may be possible to do that, as long as the plots are completely distinct and not combined as separate subplots.   Again though, this is more based on what I've read.</p>",
        "id": 52295,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1647463413
    },
    {
        "content": "<p>After much tinkering (including with <code>dask</code> a bit), I was ultimately successful with my original approach using <code>multiprocessing</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">setup_ax</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">):</span>\n  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplot</span><span class=\"p\">(</span><span class=\"mi\">111</span><span class=\"p\">,</span><span class=\"n\">projection</span><span class=\"o\">=</span><span class=\"n\">ccrs</span><span class=\"o\">.</span><span class=\"n\">LambertConformal</span><span class=\"p\">(</span><span class=\"n\">central_longitude</span><span class=\"o\">=-</span><span class=\"mf\">97.5</span><span class=\"p\">,</span><span class=\"n\">central_latitude</span><span class=\"o\">=</span><span class=\"mf\">38.5</span><span class=\"p\">),</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"n\">idstr</span><span class=\"p\">)</span>\n  <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">add_feature</span><span class=\"p\">(</span><span class=\"n\">cfeature</span><span class=\"o\">.</span><span class=\"n\">COASTLINE</span><span class=\"o\">.</span><span class=\"n\">with_scale</span><span class=\"p\">(</span><span class=\"s1\">'50m'</span><span class=\"p\">),</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">add_feature</span><span class=\"p\">(</span><span class=\"n\">cfeature</span><span class=\"o\">.</span><span class=\"n\">STATES</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">add_feature</span><span class=\"p\">(</span><span class=\"n\">cfeature</span><span class=\"o\">.</span><span class=\"n\">BORDERS</span><span class=\"p\">,</span> <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n  <span class=\"k\">return</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">plot_comp</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span><span class=\"n\">field</span><span class=\"p\">,</span><span class=\"n\">minval</span><span class=\"p\">,</span><span class=\"n\">cmap</span><span class=\"p\">,</span><span class=\"n\">norm</span><span class=\"p\">):</span>\n  <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">setup_ax</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n  <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">pcolormesh</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">lon0</span><span class=\"p\">,</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">lat0</span><span class=\"p\">,</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s1\">'z0'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">dim</span><span class=\"o\">=</span><span class=\"s1\">'z0'</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"n\">minval</span><span class=\"p\">),</span><span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ccrs</span><span class=\"o\">.</span><span class=\"n\">PlateCarree</span><span class=\"p\">(),</span><span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">cmap</span><span class=\"p\">,</span><span class=\"n\">norm</span><span class=\"o\">=</span><span class=\"n\">norm</span><span class=\"p\">)</span>\n  <span class=\"n\">fig</span><span class=\"o\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"o\">+</span><span class=\"s1\">'.png'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># New figure</span>\n<span class=\"n\">fig</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">figure</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">22</span><span class=\"p\">,</span><span class=\"mi\">15</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Items for parallelizing</span>\n<span class=\"n\">fn</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'f1'</span><span class=\"p\">,</span><span class=\"s1\">'f2'</span><span class=\"p\">,</span><span class=\"s1\">'f3'</span><span class=\"p\">]</span>\n<span class=\"n\">mv</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">,</span><span class=\"mf\">0.0</span><span class=\"p\">]</span>\n<span class=\"n\">cm</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">col1</span><span class=\"p\">,</span><span class=\"n\">col2</span><span class=\"p\">,</span><span class=\"n\">col3</span><span class=\"p\">]</span>\n<span class=\"n\">nm</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">norm1</span><span class=\"p\">,</span><span class=\"n\">norm2</span><span class=\"p\">,</span><span class=\"n\">norm3</span><span class=\"p\">]</span>\n\n<span class=\"n\">mp</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">starmap</span><span class=\"p\">(</span><span class=\"n\">plot_comp</span><span class=\"p\">,[(</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"n\">fn</span><span class=\"p\">],</span><span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">f</span><span class=\"p\">,</span><span class=\"n\">m</span><span class=\"p\">,</span><span class=\"n\">c</span><span class=\"p\">,</span><span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">fn</span><span class=\"p\">,</span><span class=\"n\">mv</span><span class=\"p\">,</span><span class=\"n\">cm</span><span class=\"p\">,</span><span class=\"n\">nm</span><span class=\"p\">))])</span>\n</code></pre></div>\n<p>The major change I think was defining a new axis and saving the figure within <code>plot_comp()</code>. Thus, nothing is returned from <code>multiprocessing</code> in this instance. Timing within Python shows roughly a 40-50% speedup taking this approach for three fields.</p>",
        "id": 52342,
        "sender_full_name": "Daniel Adriaansen",
        "timestamp": 1647546218
    },
    {
        "content": "<p>Nice <span class=\"user-mention\" data-user-id=\"234\">@Daniel Adriaansen</span> . This would make a great blogpost for the ESDS blog if you're up for contributing: <a href=\"https://ncar.github.io/esds/\">https://ncar.github.io/esds/</a></p>",
        "id": 52345,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1647569256
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"25\">Deepak Cherian</span> <a href=\"#narrow/stream/10-python-questions/topic/multiprocessing.20with.20matplotlib/near/52345\">said</a>:</p>\n<blockquote>\n<p>Nice <span class=\"user-mention silent\" data-user-id=\"234\">Daniel Adriaansen</span> . This would make a great blogpost for the ESDS blog if you're up for contributing: <a href=\"https://ncar.github.io/esds/\">https://ncar.github.io/esds/</a></p>\n</blockquote>\n<p>Thanks for the opportunity! I'd be happy to contribute this as an example. What's the best way to coordinate? Feel free to email me directly (I believe my email is visible in my profile, but if not reply here and I will send it directly).</p>",
        "id": 52451,
        "sender_full_name": "Daniel Adriaansen",
        "timestamp": 1647879586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234\">Daniel Adriaansen</span> <a href=\"#narrow/stream/10-python-questions/topic/multiprocessing.20with.20matplotlib/near/52451\">said</a>:<br>\n What's the best way to coordinate? </p>\n<div class=\"codehilite\"><pre><span></span><code>A pull request here would be best: https://github.com/NCAR/esds .\n</code></pre></div>",
        "id": 52477,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1647959403
    }
]