[
    {
        "content": "<p>Hi folks,</p>\n<p>I'm a software engineer with iHESP, which is a collaboration between NCAR, Texas A&amp;M and QNLM, China. <span class=\"user-mention\" data-user-id=\"14\">@Matt Long</span> added me on here a while ago, but I finally thought I'd drop in and ask a question. One of our projects is the Regional Community Earth System Model (R-CESM), which uses the existing CESM framework to couple ROMS and WRF for a regional domain. As part of that project, we have been learning how to post-process ROMS model output using the Pangeo framework. We're making use of <a href=\"https://github.com/kthyng/xroms\" target=\"_blank\" title=\"https://github.com/kthyng/xroms\">xroms </a>, which builds on grid metrics available through xgcm.</p>\n<p>I'm having issues when trying to chain xgcm's vertical interpolation (wrapped by xroms) with a simple time mean operation. <code>salt</code> has dimensions <code>(ocean_time, s_rho, eta_rho, xi_rho)</code>. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">depths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n<span class=\"n\">varout</span> <span class=\"o\">=</span> <span class=\"n\">xroms</span><span class=\"o\">.</span><span class=\"n\">isoslice</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">depths</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">salt</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"s1\">&#39;ocean_time&#39;</span><span class=\"p\">)</span>\n<span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n</pre></div>\n\n\n<p>The above statements are successful with a small number of files open, but crashes when the dataset is large. I inspected the dask dashboard and realized that dask is trying to open too many time steps (and interpolate them) without sufficiently reducing data with the mean operation. And so the workers run out of memory. Kristen Thyng pointed me to a very helpful thread on <a href=\"https://github.com/dask/distributed/issues/2602\" target=\"_blank\" title=\"https://github.com/dask/distributed/issues/2602\">memory backpressure</a>, and so I tried one of the solutions listed in the thread: <code>dask.config.set(**{\"optimization.fuse.ave-width\": 20})</code>, and the operations seemed to work for moderately-sized datasets, but still failed for the larger ones. I wanted to ask if you had any ideas on how I should proceed here. </p>\n<p>I was wondering if I'd have more luck with manually parallelizing the vertical interpolation + mean operation using <code>dask.delayed</code>. The intention being that I might at least get a say on how much data is being opened before the average operation. I wanted to ask if the below statements could be equivalently performed using <code>map_blocks</code>(either the xarray or dask version).</p>\n<p>I have a seemingly strange issue with below implementation. <code>dask.array.stack</code> seems to work if <strong>delayed_arrays</strong> is pre-computed before the stack operation, but fails if it's evaluated lazily (like below). </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">):</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">xroms</span>\n    <span class=\"n\">depths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n    <span class=\"n\">avg</span> <span class=\"o\">=</span> <span class=\"n\">xroms</span><span class=\"o\">.</span><span class=\"n\">isoslice</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">,</span> <span class=\"n\">depths</span><span class=\"p\">,</span> <span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"s1\">&#39;ocean_time&#39;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">avg</span>\n\n<span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;salt&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">chunk</span><span class=\"p\">({</span><span class=\"s2\">&quot;ocean_time&quot;</span><span class=\"p\">:</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s2\">&quot;s_rho&quot;</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;eta_rho&quot;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;xi_rho&quot;</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">})</span>\n<span class=\"n\">delayed_tasks</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">delayed</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">:</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">8</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">if</span> <span class=\"n\">i</span><span class=\"o\">%</span><span class=\"mi\">8</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">delayed</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)(</span><span class=\"n\">var</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">(</span><span class=\"n\">scheduler</span><span class=\"o\">=</span><span class=\"s1\">&#39;single-threaded&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">delayed_arrays</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">delayed_tasks</span><span class=\"p\">:</span>\n    <span class=\"n\">delayed_arrays</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">from_delayed</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">,</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">,</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">))</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">dask</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">delayed_arrays</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n</pre></div>",
        "id": 25561,
        "sender_full_name": "Abishek Gopal",
        "timestamp": 1614013629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"86\">@Abishek Gopal</span> can you post a reproducible example that I can run on casper?</p>\n<p>One trick is to try <code>.isoslice(..).to_zarr</code> this will write to disk in parallel, and decrease memory. You can then open the zarr file to calculate the time mean.</p>",
        "id": 25562,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614014271
    },
    {
        "content": "<p>If that doesn't work then wrap the <code>.isoslice(...).to_zarr()</code> in a <code>map_blocks</code> call. This forces dask to interpolate and write in the same task (you're forcing dask to \"fuse\" the two steps), and should definitely work. You can use the <code>region</code> keyword in <code>to_zarr</code> to write to the same store.</p>",
        "id": 25563,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614014736
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span>! I haven't tried <code>to_zarr()</code> before, and will need to check out your suggestions. </p>\n<p>I will also look into getting  you a reproducible notebook. Some of our datasets might be on glade, but will need to check.</p>",
        "id": 25564,
        "sender_full_name": "Abishek Gopal",
        "timestamp": 1614015033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span> I'm running into a few issues when trying to wrap  <code>.isoslice(...).to_zarr()</code> in a <code>map_blocks</code> call. </p>\n<ol>\n<li>I created a new dataset with just the interpolated salinity so that I could call to_zarr() on the dataset. Not sure if there's a better way around that. </li>\n<li>xr.map_blocks is expecting a dataset or dataarray to be returned from the function,  and I was wondering if there's a way to bypass that issue while using to_zarr()</li>\n</ol>\n<p>Here's my code snippet:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">write_zarr</span><span class=\"p\">(</span><span class=\"n\">ds_block</span><span class=\"p\">):</span>\n    <span class=\"n\">ds_block</span><span class=\"o\">.</span><span class=\"n\">to_zarr</span><span class=\"p\">(</span><span class=\"s1\">&#39;./zarr_path&#39;</span><span class=\"p\">,</span><span class=\"n\">consolidated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">depths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"n\">ds1</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">attrs</span> <span class=\"p\">)</span>\n<span class=\"n\">ds1</span><span class=\"p\">[</span><span class=\"s1\">&#39;salt&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xroms</span><span class=\"o\">.</span><span class=\"n\">isoslice</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">depths</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">salt</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">])</span>\n\n<span class=\"k\">for</span> <span class=\"n\">ii</span> <span class=\"ow\">in</span> <span class=\"n\">ds1</span><span class=\"o\">.</span><span class=\"n\">data_vars</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;grid&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">ds1</span><span class=\"p\">[</span><span class=\"n\">ii</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"k\">del</span> <span class=\"n\">ds1</span><span class=\"p\">[</span><span class=\"n\">ii</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">]</span>  <span class=\"c1\">## grid attribute incompatible with to_zarr()</span>\n\n<span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">map_blocks</span><span class=\"p\">(</span><span class=\"n\">write_zarr</span><span class=\"p\">,</span> <span class=\"n\">ds1</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 25601,
        "sender_full_name": "Abishek Gopal",
        "timestamp": 1614032903
    },
    {
        "content": "<p>return something small like <code>ds_block.time</code> and pass <code>template=ds1.time</code> in <code>map_blocks</code></p>",
        "id": 25602,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614033232
    },
    {
        "content": "<p>(ideally we would have <code>Dataset.to_delayed</code> but we don't so this is a workaround...)</p>",
        "id": 25603,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614033257
    },
    {
        "content": "<p>Thanks for your suggestions! I eventually got <code>map_blocks</code> to work by using <code>template = xr.DataArray(data=np.arange(1)).chunk((1,))</code>. I tried with <code>ds.ocean_time</code> before, but I got an error saying the object was not iterable, probably because it wasn't chunked.</p>\n<p>My map_blocks function appears to write to a zarr store now, but it seems to be writing out only one block in total, despite there being 9 chunks in salinity. Would this be because I haven't used the <code>region</code> keyword in <code>to_zarr</code> yet? I wasn't sure how to get the extents of the current block within the callable function (from map_blocks). I've seen there is a <code>block_info</code> variable in the dask version of <code>map_blocks</code>, but haven't seen an equivalent in the xarray docs. </p>\n<p>Here's my current code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func3</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">):</span>\n    <span class=\"n\">depths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n    <span class=\"n\">varout</span> <span class=\"o\">=</span> <span class=\"n\">xroms</span><span class=\"o\">.</span><span class=\"n\">isoslice</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">,</span> <span class=\"n\">depths</span><span class=\"p\">,</span> <span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">])</span>\n\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;grid&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"k\">del</span> <span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">to_dataset</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;salt&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_zarr</span><span class=\"p\">(</span><span class=\"s1\">&#39;./zarr_path&#39;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">chunk</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">chunk</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n<span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">map_blocks</span><span class=\"p\">(</span><span class=\"n\">func3</span><span class=\"p\">,</span><span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">salt</span><span class=\"p\">,</span><span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 25706,
        "sender_full_name": "Abishek Gopal",
        "timestamp": 1614095148
    },
    {
        "content": "<blockquote>\n<p>Would this be because I haven't used the region keyword in to_zarr yet?</p>\n</blockquote>\n<p>yes absolutely.</p>\n<blockquote>\n<p>I wasn't sure how to get the extents of the current block within the callable function (from map_blocks).</p>\n</blockquote>\n<p><code>block_info</code> wasn't implemented because you know it from the coordinate variables (<code>lat_rho</code>, <code>lon_rho</code>)</p>\n<p>I see now that region expects integers. Can you show me the repr for ds.salt?</p>",
        "id": 25707,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614095679
    },
    {
        "content": "<p>Oh got it. Here's what ds.salt looks like. </p>\n<p><a href=\"/user_uploads/2/8f/M1H6y1vSZ3mPJOS1REvt132U/pasted_image.png\" target=\"_blank\" title=\"pasted_image.png\">pasted image</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/8f/M1H6y1vSZ3mPJOS1REvt132U/pasted_image.png\" target=\"_blank\" title=\"pasted image\"><img src=\"/user_uploads/2/8f/M1H6y1vSZ3mPJOS1REvt132U/pasted_image.png\"></a></div>",
        "id": 25726,
        "sender_full_name": "Abishek Gopal",
        "timestamp": 1614099464
    },
    {
        "content": "<p>right so you can use <code>xi_rho</code> and <code>eta_rho</code> to write to the right region</p>",
        "id": 25732,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614102737
    },
    {
        "content": "<p>See <a href=\"https://xarray.pydata.org/en/stable/io.html#appending-to-existing-zarr-stores\" target=\"_blank\" title=\"https://xarray.pydata.org/en/stable/io.html#appending-to-existing-zarr-stores\">https://xarray.pydata.org/en/stable/io.html#appending-to-existing-zarr-stores</a></p>",
        "id": 25733,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614102792
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span>! Since I'm chunking in time, I decided to create a temp index along time to simplify the process of selecting the region (<code>.assign_coords(ind=(\"ocean_time\", np.arange(varin.ocean_time.size)))</code>). And then I followed the link you sent to first create a dummy zarr store with zeros across the full size of the variable, and call map_blocks to overwrite specific regions. </p>\n<p>I checked that the dummy zarr store had size:72 along time before calling map_blocks, but I still get this message when appending to the dummy store.</p>\n<p>**ValueError: variable 'ocean_time' already exists with different dimension sizes: {'ocean_time': 7} != {'ocean_time': 0}. to_zarr() only supports changing dimension sizes when explicitly appending, but append_dim=None.<br>\n**<br>\nHere's my code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">func3</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">):</span>\n    <span class=\"n\">depths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1000</span><span class=\"p\">]</span>\n    <span class=\"n\">varout</span> <span class=\"o\">=</span> <span class=\"n\">xroms</span><span class=\"o\">.</span><span class=\"n\">isoslice</span><span class=\"p\">(</span><span class=\"n\">da</span><span class=\"p\">,</span> <span class=\"n\">depths</span><span class=\"p\">,</span> <span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">compute</span><span class=\"p\">()</span>\n\n    <span class=\"n\">t0</span><span class=\"o\">=</span><span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">ind</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">t1</span><span class=\"o\">=</span><span class=\"n\">da</span><span class=\"o\">.</span><span class=\"n\">ind</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n    <span class=\"k\">if</span> <span class=\"s1\">&#39;grid&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"k\">del</span> <span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">]</span>\n    <span class=\"n\">varout</span><span class=\"o\">.</span><span class=\"n\">to_dataset</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;salt&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_zarr</span><span class=\"p\">(</span><span class=\"s1\">&#39;./zarr_path&#39;</span><span class=\"p\">,</span> <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;ocean_time&quot;</span><span class=\"p\">:</span> <span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"n\">t0</span><span class=\"p\">,</span><span class=\"n\">t1</span><span class=\"p\">)})</span>\n     <span class=\"c1\">## also call .drop([&#39;lon_rho&#39;, &#39;lat_rho&#39;, &#39;xi_rho&#39;, &#39;eta_rho&#39;, &#39;z_rho&#39;])  prior to to_zarr()</span>\n    <span class=\"k\">return</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">chunk</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">DataArray</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">chunk</span><span class=\"p\">((</span><span class=\"mi\">1</span><span class=\"p\">,))</span>\n\n<span class=\"n\">depths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">100</span><span class=\"p\">]</span>\n<span class=\"n\">varin</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">salt</span>\n\n<span class=\"n\">dummies</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">zeros_like</span><span class=\"p\">(</span><span class=\"n\">varin</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"s1\">&#39;grid&#39;</span> <span class=\"ow\">in</span> <span class=\"n\">dummies</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">:</span> <span class=\"k\">del</span> <span class=\"n\">dummies</span><span class=\"o\">.</span><span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s1\">&#39;grid&#39;</span><span class=\"p\">]</span>\n<span class=\"n\">dummies</span><span class=\"o\">.</span><span class=\"n\">to_dataset</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;salt&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_zarr</span><span class=\"p\">(</span><span class=\"s1\">&#39;./zarr_path&#39;</span><span class=\"p\">,</span> <span class=\"n\">compute</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">consolidated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">varin</span> <span class=\"o\">=</span> <span class=\"n\">varin</span><span class=\"o\">.</span><span class=\"n\">assign_coords</span><span class=\"p\">(</span><span class=\"n\">ind</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;ocean_time&quot;</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">varin</span><span class=\"o\">.</span><span class=\"n\">ocean_time</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)))</span>\n\n<span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">map_blocks</span><span class=\"p\">(</span><span class=\"n\">func3</span><span class=\"p\">,</span><span class=\"n\">varin</span><span class=\"p\">,</span><span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">)</span>\n</pre></div>",
        "id": 25768,
        "sender_full_name": "Abishek Gopal",
        "timestamp": 1614115276
    },
    {
        "content": "<p>hmm... not sure. I would try the simple example in the documentation first and work from there.</p>",
        "id": 25770,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1614117489
    }
]