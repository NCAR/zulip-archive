[
    {
        "content": "<p>The functions <code>to_sparse</code> and <code>convert_pft_variables_to_sparse</code> that <span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span> and <span class=\"user-mention\" data-user-id=\"47\">@Katie Dagon</span> described at <a href=\"https://ncar.github.io/esds/posts/2022/sparse-PFT-gridding/\">https://ncar.github.io/esds/posts/2022/sparse-PFT-gridding/</a> are awesome, but despite a comment in the former, they only work with variables up to 2 dimensions. Would some hero like to generalize it to work with an arbitrary number of dimensions?</p>\n<p>As an example, I added some error handling to show this for the file <code>/glade/work/samrabin/ctsm53019_f09_BNF_hist/lnd/hist/ctsm53019_f09_BNF_hist.clm2.h5.1851-01-01-00000.nc</code> (using <code>pftnames</code> from the file <code>/glade/campaign/cesm/cesmdata/cseg/inputdata/lnd/clm2/paramdata/ctsm60_params.c241119.nc</code>):</p>\n<div class=\"codehilite\"><pre><span></span><code>Processed pfts1d_lon with dims (&#39;pft&#39;,)\nProcessed pfts1d_lat with dims (&#39;pft&#39;,)\nProcessed pfts1d_ixy with dims (&#39;pft&#39;,)\nProcessed pfts1d_jxy with dims (&#39;pft&#39;,)\nProcessed pfts1d_gi with dims (&#39;pft&#39;,)\nProcessed pfts1d_li with dims (&#39;pft&#39;,)\nProcessed pfts1d_ci with dims (&#39;pft&#39;,)\nProcessed pfts1d_wtgcell with dims (&#39;pft&#39;,)\nProcessed pfts1d_wtlunit with dims (&#39;pft&#39;,)\nProcessed pfts1d_wtcol with dims (&#39;pft&#39;,)\nProcessed pfts1d_itype_veg with dims (&#39;pft&#39;,)\nProcessed pfts1d_itype_col with dims (&#39;pft&#39;,)\nProcessed pfts1d_itype_lunit with dims (&#39;pft&#39;,)\nProcessed pfts1d_active with dims (&#39;pft&#39;,)\nProcessed GDD20_BASELINE with dims (&#39;time&#39;, &#39;pft&#39;)\nProcessed GDD20_SEASON_END with dims (&#39;time&#39;, &#39;pft&#39;)\nProcessed GDD20_SEASON_START with dims (&#39;time&#39;, &#39;pft&#39;)\nProcessed GRAINC_TO_FOOD_ANN with dims (&#39;time&#39;, &#39;pft&#39;)\nProcessed GRAINC_TO_SEED_ANN with dims (&#39;time&#39;, &#39;pft&#39;)\nProcessed GRAINN_TO_FOOD_ANN with dims (&#39;time&#39;, &#39;pft&#39;)\nProcessed GRAINN_TO_SEED_ANN with dims (&#39;time&#39;, &#39;pft&#39;)\nCan&#39;t handle GDDACCUM_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle GDDHARV_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle GRAINC_TO_FOOD_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle GRAINC_TO_SEED_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle GRAINN_TO_FOOD_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle GRAINN_TO_SEED_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle HARVEST_REASON_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle HDATES with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle HUI_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle SDATES_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle SOWING_REASON_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle SYEARS_PERHARV with dims (&#39;time&#39;, &#39;mxharvests&#39;, &#39;pft&#39;)\nCan&#39;t handle SDATES with dims (&#39;time&#39;, &#39;mxsowings&#39;, &#39;pft&#39;)\nCan&#39;t handle SWINDOW_ENDS with dims (&#39;time&#39;, &#39;mxsowings&#39;, &#39;pft&#39;)\nCan&#39;t handle SWINDOW_STARTS with dims (&#39;time&#39;, &#39;mxsowings&#39;, &#39;pft&#39;)\n</code></pre></div>",
        "id": 105485,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1738609489
    },
    {
        "content": "<p>Moreover, the resulting Dataset fails to <code>compute()</code> if the input Dataset is comprised of more than one timestep (e.g., having done <code>xr.open_mfdataset()</code> on the 1851 and 1852 files instead of just on the 1851 file:</p>\n<div class=\"codehilite\"><pre><span></span><code>Traceback (most recent call last):\n  File &quot;/glade/u/home/samrabin/sparse_array_testing/sparse_array_testing.py&quot;, line 160, in &lt;module&gt;\n    ds_sel = ds_gridded[&quot;GRAINC_TO_FOOD_ANN&quot;].isel(time=0, vegtype=17).compute()\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/work/samrabin/conda-envs/cupid-analysis/lib/python3.11/site-packages/xarray/core/dataarray.py&quot;, line 1206, in compute\n    return new.load(**kwargs)\n           ^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/work/samrabin/conda-envs/cupid-analysis/lib/python3.11/site-packages/xarray/core/dataarray.py&quot;, line 1174, in load\n    ds = self._to_temp_dataset().load(**kwargs)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/work/samrabin/conda-envs/cupid-analysis/lib/python3.11/site-packages/xarray/core/dataset.py&quot;, line 900, in load\n    evaluated_data: tuple[np.ndarray[Any, Any], ...] = chunkmanager.compute(\n                                                       ^^^^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/work/samrabin/conda-envs/cupid-analysis/lib/python3.11/site-packages/xarray/namedarray/daskmanager.py&quot;, line 85, in compute\n    return compute(*data, **kwargs)  # type: ignore[no-untyped-call, no-any-return]\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/work/samrabin/conda-envs/cupid-analysis/lib/python3.11/site-packages/dask/base.py&quot;, line 662, in compute\n    results = schedule(dsk, keys, **kwargs)\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/u/home/samrabin/sparse_array_testing/sparse_array_testing.py&quot;, line 50, in to_sparse\n    coords = np.stack([itime] + tostack, axis=0)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File &quot;/glade/work/samrabin/conda-envs/cupid-analysis/lib/python3.11/site-packages/numpy/core/shape_base.py&quot;, line 449, in stack\n    raise ValueError(&#39;all input arrays must have the same shape&#39;)\nValueError: all input arrays must have the same shape\n</code></pre></div>",
        "id": 105486,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1738611134
    },
    {
        "content": "<p>(The latter error can be worked around by just gridding each file one-by-one, then concatenating them along <code>time</code>.)</p>",
        "id": 105487,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1738611858
    },
    {
        "content": "<p>I think the version here does work for n-dimensions but obviously i haven't looked at it in 4 years: <a href=\"https://github.com/NCAR/ctsm_python_gallery/blob/master/notebooks/sparse-PFT-gridding.ipynb\">https://github.com/NCAR/ctsm_python_gallery/blob/master/notebooks/sparse-PFT-gridding.ipynb</a></p>",
        "id": 105504,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1738796870
    },
    {
        "content": "<p>Thanks, Deepak! I'll give it a go when I get a chance to come back to this work, but it does indeed look more flexible.</p>",
        "id": 105551,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1738947222
    }
]