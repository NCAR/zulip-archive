[
    {
        "content": "<p>I'm trying to plot a simple sea ice concentration on a projected plot, but I'm getting some erroneous lines in my figures (see attached). My data is CESM2 output.  In the past when working with ocean (POP) output, I've had success with replacing the lat/lon grid with that from another file, and then the applying pop_add_cyclic function in order to wrap the lons properly, but this doesn't seem to work with the seaice data.   Attached I'm showing a screenshot that displays the details of the original data, then how I replace the lat/lon with a different grid, and then apply the pop_add_cyclic function.  After the pop_add_cyclic function is applied, I don't see the dimension ni change, as I would have expected. Can anyone identify what is going wrong here? The pop_add_cyclic function I'm using is:</p>\n<div class=\"codehilite\"><pre><span></span><code>def pop_add_cyclic(ds):\n\n    nj = ds.TLAT.shape[0]\n    ni = ds.TLON.shape[1]\n\n    xL = int(ni/2 - 1)\n    xR = int(xL + ni)\n\n    tlon = ds.TLON.data\n    tlat = ds.TLAT.data\n\n    tlon = np.where(np.greater_equal(tlon, min(tlon[:,0])), tlon-360., tlon)\n    lon  = np.concatenate((tlon, tlon + 360.), 1)\n    lon = lon[:, xL:xR]\n\n    if ni == 320:\n        lon[367:-3, 0] = lon[367:-3, 0] + 360.\n    lon = lon - 360.\n\n    lon = np.hstack((lon, lon[:, 0:1] + 360.))\n    if ni == 320:\n        lon[367:, -1] = lon[367:, -1] - 360.\n\n    #-- trick cartopy into doing the right thing:\n    #   it gets confused when the cyclic coords are identical\n    lon[:, 0] = lon[:, 0] - 1e-8\n\n    #-- periodicity\n    lat = np.concatenate((tlat, tlat), 1)\n    lat = lat[:, xL:xR]\n    lat = np.hstack((lat, lat[:,0:1]))\n\n    TLAT = xr.DataArray(lat, dims=(&#39;nlat&#39;, &#39;nlon&#39;))\n    TLON = xr.DataArray(lon, dims=(&#39;nlat&#39;, &#39;nlon&#39;))\n\n    dso = xr.Dataset(coords={&#39;TLAT&#39;: TLAT, &#39;TLON&#39;: TLON})\n\n    # copy vars\n    varlist = [v for v in ds.data_vars if v not in [&#39;TLAT&#39;, &#39;TLON&#39;]]\n    for v in varlist:\n        v_dims = ds[v].dims\n        if not (&#39;nlat&#39; in v_dims and &#39;nlon&#39; in v_dims):\n            dso[v] = ds[v]\n        else:\n            # determine and sort other dimensions\n            other_dims = set(v_dims) - {&#39;nlat&#39;, &#39;nlon&#39;}\n            other_dims = tuple([d for d in v_dims if d in other_dims])\n            lon_dim = ds[v].dims.index(&#39;nlon&#39;)\n            field = ds[v].data\n            field = np.concatenate((field, field), lon_dim)\n            field = field[..., :, xL:xR]\n            field = np.concatenate((field, field[..., :, 0:1]), lon_dim)\n            print(field.shape)\n            dso[v] = xr.DataArray(field, dims=other_dims+(&#39;nlat&#39;, &#39;nlon&#39;),\n                                  attrs=ds[v].attrs)\n\n\n    # copy coords\n    for v, da in ds.coords.items():\n        if not (&#39;nlat&#39; in da.dims and &#39;nlon&#39; in da.dims):\n            dso = dso.assign_coords(**{v: da})\n\n\n    return dso\n</code></pre></div>\n<p><a href=\"/user_uploads/2/db/qHQkZdPKRGFJNE2cReIcqq6X/Screen-Shot-2023-01-07-at-2.10.25-PM.png\">Screen-Shot-2023-01-07-at-2.10.25-PM.png</a> <a href=\"/user_uploads/2/ff/i5CM41h_s0gT-ZjOBCBZH0g-/Screen-Shot-2023-01-07-at-2.13.27-PM.png\">Screen-Shot-2023-01-07-at-2.13.27-PM.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/db/qHQkZdPKRGFJNE2cReIcqq6X/Screen-Shot-2023-01-07-at-2.10.25-PM.png\" title=\"Screen-Shot-2023-01-07-at-2.10.25-PM.png\"><img src=\"/user_uploads/2/db/qHQkZdPKRGFJNE2cReIcqq6X/Screen-Shot-2023-01-07-at-2.10.25-PM.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/2/ff/i5CM41h_s0gT-ZjOBCBZH0g-/Screen-Shot-2023-01-07-at-2.13.27-PM.png\" title=\"Screen-Shot-2023-01-07-at-2.13.27-PM.png\"><img src=\"/user_uploads/2/ff/i5CM41h_s0gT-ZjOBCBZH0g-/Screen-Shot-2023-01-07-at-2.13.27-PM.png\"></a></div>",
        "id": 71472,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1673129880
    },
    {
        "content": "<p>I think I've figure this out -- in the sea ice file, the lat/lon contained masked values in locations with land.  After using the grid from pop_tools instead of the lat/lon associated with the sea ice data, it works:</p>\n<div class=\"codehilite\"><pre><span></span><code># using pop tools, get the region mask.\ngrid_name = &#39;POP_gx1v7&#39;  # our 1 degree pop grid.\ngrid = pop_tools.get_grid(grid_name)\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>import cmocean as cm\nimport cartopy.feature as cfeature\n\nf, ax = plt.subplots(subplot_kw=dict(projection=ccrs.SouthPolarStereo()))\n\np = ax.pcolormesh(grid.TLONG,\n              grid.TLAT,\n              mfds3_onetime.aice,\n              transform=ccrs.PlateCarree(),\n              vmin=0, vmax=1, cmap=cm.cm.ice)\n\nf.colorbar(p, label=&#39;sea ice concentration [%]&#39;)\nax.set_title(&#39;JJA Sea Ice Concentration (1970-2000)&#39;)\n\nax.set_extent([-180, 180, -90,-45], ccrs.PlateCarree())\n# Add land.\nax.add_feature(cfeature.LAND, color=&#39;#a9a9a9&#39;, zorder=4)\n</code></pre></div>",
        "id": 71502,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1673294299
    }
]