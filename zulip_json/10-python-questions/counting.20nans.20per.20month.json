[
    {
        "content": "<p>Hi all, I'm trying to count the nans in my dataset per month. I have previously counted nans in the entire dataset like this:<br>\n<code>nans_wdt = xr.ufuncs.isnan(ds_wdt_iso.wdt_iso).sum(dim='time')</code><br>\nbut now would like to do this per month. Using <code>groupby('time.month')</code> doesn't work unfortunately: <br>\n<code>AttributeError: 'DatasetGroupBy' object has no attribute '_unary_op'</code><br>\nI can count per month with this (where <code>mon</code> stands for the months I'm currently counting): <code>xr.ufuncs.isnan(ds_wdt_iso.sel(time=ds_wdt_iso.wdt_iso.time.dt.month.isin([mon]))).sum(dim='time')</code>,<br>\n but then the only way I see to get all 12 months is to loop -- can someone help with a more elegant solution?</p>",
        "id": 33757,
        "sender_full_name": "Anna-Lena Deppenmeier",
        "timestamp": 1623105737
    },
    {
        "content": "<p><code>ds.groupby(\"time.month\").map(lambda g: g.isnull().sum(\"time\"))</code></p>",
        "id": 33758,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1623107701
    },
    {
        "content": "<p>cool I'll try it and learn more about map and lambda (I noticed it saved the day already with Danica's problem)</p>",
        "id": 33792,
        "sender_full_name": "Anna-Lena Deppenmeier",
        "timestamp": 1623165400
    },
    {
        "content": "<p>A non-lambda version is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">count_null</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">isnull</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">(</span><span class=\"s2\">&quot;time&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"s2\">&quot;time.month&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">count_null</span><span class=\"p\">)</span><span class=\"o\">.</span> <span class=\"c1\"># applies count_null to each group</span>\n</pre></div>\n\n\n<p>They're equivalent, for such short functions that are used only once it's just a lot more convenient to use a lambda (especially if you're lazy like me)</p>",
        "id": 33794,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1623167060
    },
    {
        "content": "<p>Coding \"best practices\" can be endlessly debated, but I follow the general rule of avoiding the use of lambda if you're writing code that other people in the wider community will want to run also.   One of python's potential advantages is that ideas can be expressed in short, simple pieces of code that can be understood quickly.</p>",
        "id": 33866,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1623182358
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"9\">@Brian Bonnlander</span>  I do not fully understand <code>lambda</code> functionality (it was also provided in an example to me earlier this week), but can you explain why it might be problematic when sharing code more broadly?</p>",
        "id": 33877,
        "sender_full_name": "Danica Lombardozzi",
        "timestamp": 1623184236
    },
    {
        "content": "<p>I didn't mean anything super profound.   Lambda functions are not strictly necessary in most computer languages.   They act as a form of convenience.    Lambdas are \"unnamed\" or \"ephemeral\" functions which can be convenient when you need to use a function once, you never want to use it again.</p>\n<p>Most places where lambdas are used, you could instead define a function first (as above with the <code>count_null()</code> function).    Function definitions are nice because you can give them English names that describe what they do.   Most people find that helpful.    </p>\n<p>It always takes me longer to understand what someone is trying to do with their code if many steps are happening on a single line.   Lambdas kind of require you to produce longer coding expressions,  and that makes it harder for others to quickly determine the code's intent.</p>",
        "id": 33882,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1623184949
    },
    {
        "content": "<p>Thanks for this clear explanation! It's very helpful for me to understand lambda and best coding practices.</p>",
        "id": 33885,
        "sender_full_name": "Danica Lombardozzi",
        "timestamp": 1623185117
    }
]