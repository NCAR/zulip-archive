[
    {
        "content": "<p>I have two Zarr stores whose data I want to combine along the time dimension, and then save as a new Zarr store.     The second Zarr store has time values that start just after when the first Zarr store's time values end.</p>\n<p>Both datasets have the same data variables and chunk sizes.    But I know that the combined chunks from both will likely need re-alignment, because the final chunks from the first Zarr store are not completely filled. </p>\n<p>Is calling unify_chunks() after concatenation going to de-fragment and rechunk the data using the existing chunk information, as I hope it will?     </p>\n<p>Thanks for any insights.</p>",
        "id": 20534,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1603843953
    },
    {
        "content": "<p>I guess I should have tried this before asking, but <code>unify_chunks()</code> does not do what I need.   I need to call <code>chunk()</code> with the coordinate dimensions and chunk sizes  I am interested in.  </p>\n<p>All I need to figure out is how to produce the dictionary describing my chunk sizes.   <br>\nI can get the data variable dimension names with this expression:</p>\n<p><code>ds['my_var'].dims\n('member_id', 'time', 'lat', 'lon')</code></p>\n<p>And I can get the data variable chunk sizes with this expression:</p>\n<p><code>ds['my_var'].data.chunksize\n(4, 1000, 65, 120)</code></p>\n<p>But I can't seem to get the dictionary that  puts these two things together, i.e.   </p>\n<p><code>{'member_id': 4, 'time': 1000, 'lat': 65, 'lon': 120}</code></p>\n<p>For now, I will assume that the ordering of values matches and I can construct the dictionary myself, but I don't know if this is a safe assumption.</p>",
        "id": 20589,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1603912349
    },
    {
        "content": "<blockquote>\n<p>But I can't seem to get the dictionary that puts these two things together, i.e.</p>\n</blockquote>\n<p>Are you looking for this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span> <span class=\"n\">dims</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;member_id&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;time&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lat&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lon&#39;</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]:</span> <span class=\"n\">chunksizes</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">)</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">dims</span><span class=\"p\">,</span> <span class=\"n\">chunksizes</span><span class=\"p\">))</span>\n<span class=\"n\">Out</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]:</span> <span class=\"p\">{</span><span class=\"s1\">&#39;member_id&#39;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">&#39;time&#39;</span><span class=\"p\">:</span> <span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lat&#39;</span><span class=\"p\">:</span> <span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"s1\">&#39;lon&#39;</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">}</span>\n</pre></div>",
        "id": 20591,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1603912602
    },
    {
        "content": "<p>That works as long as the values for <code>dims</code> and <code>chunksizes</code> are always produced in the same order.   Is this a fair assumption?</p>",
        "id": 20593,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1603912692
    },
    {
        "content": "<p>Yes, the ordering matters</p>",
        "id": 20594,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1603912717
    },
    {
        "content": "<p>Do you mean that I can assume the above code will always work?   I don't want to associate a key with the wrong value...</p>",
        "id": 20595,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1603912861
    },
    {
        "content": "<p>Instead of <code>ds['my_var'].data.chunksize</code>,  Try the following </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;my_var&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"p\">,</span> <span class=\"n\">ds</span><span class=\"p\">[</span><span class=\"s1\">&#39;my_var&#39;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">chunks</span><span class=\"p\">))</span>\n</pre></div>",
        "id": 20596,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1603912961
    },
    {
        "content": "<p>This is what I get:</p>\n<div class=\"codehilite\"><pre><span></span>dict(zip(ds[&#39;uas&#39;].dims, ds[&#39;uas&#39;].chunks))\n{&#39;member_id&#39;: (4, 4, 4),\n &#39;time&#39;: (1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  1000,\n  698),\n &#39;lat&#39;: (65, 65, 65, 63),\n &#39;lon&#39;: (120, 120, 120, 120, 120)}\n</pre></div>\n\n\n<p>I don't think that is what I want...I just want to know if I can trust that <code>dims</code> and <code>chunksize</code> will order the values correctly for me.</p>",
        "id": 20600,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1603913177
    },
    {
        "content": "<blockquote>\n<p>I can trust that dims and chunksize will order the values correctly for me.</p>\n</blockquote>\n<p>I've always used both, I haven't run into any issues... It's my understanding that dims, chunksize are returned in the same ordering</p>",
        "id": 20601,
        "sender_full_name": "Anderson Banihirwe",
        "timestamp": 1603913368
    },
    {
        "content": "<p>Thanks, I appreciate knowing your experience so far.   I will print some diagnostics to help make sure that things look correct.</p>",
        "id": 20602,
        "sender_full_name": "Brian Bonnlander",
        "timestamp": 1603913436
    }
]