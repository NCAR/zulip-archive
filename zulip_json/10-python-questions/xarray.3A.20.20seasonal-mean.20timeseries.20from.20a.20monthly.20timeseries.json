[
    {
        "content": "<p>I'm struggling to find clear web documentation on how to convert a monthly DataArray (time: 720) into a yearly DataArray(time:60) that represents a seasonal average ('DJF' or 'JFM', etc). Apparently, this requires using the resample method, but I find the documentation of <code>xarray.Dataset.resample</code> to be unhelpful. Can anyone share a clear example of how this is done?</p>",
        "id": 21905,
        "sender_full_name": "Stephen Yeager",
        "timestamp": 1606080743
    },
    {
        "content": "<p>I'm sure there's a slicker way to do this with resample and/or groupby('time.season'), but here's how I've done this in the past using rolling to calculate running 3-month-means then grabbing every 12th mean:</p>\n<div class=\"codehilite\"><pre><span></span>startmonth=11 #for DJF, if first month = January; D=11 w/0-indexing\nendmonth=len(ds[&#39;time&#39;])\n\ndjfmean=ds.rolling(time=3).mean().isel(time=slice(startmonth,endmonth,12))\n</pre></div>",
        "id": 21906,
        "sender_full_name": "Elizabeth Maroon",
        "timestamp": 1606081842
    },
    {
        "content": "<p>Oops - look like I had the startmonth off; for DJF should be 13 (for February). By default, rolling using the right side of the window as the time index.</p>",
        "id": 21907,
        "sender_full_name": "Elizabeth Maroon",
        "timestamp": 1606082643
    },
    {
        "content": "<p>I came up with the following which seems to work: </p>\n<div class=\"codehilite\"><pre><span></span>def jfm_mean(ds):\n    month_length = ds.time.dt.days_in_month\n    result = ((ds * month_length).resample(time=&#39;QS-JAN&#39;).sum() /\n          month_length.resample(time=&#39;QS-JAN&#39;).sum())\n    return result.sel(time=result[&#39;time.month&#39;]==1)\n</pre></div>",
        "id": 21908,
        "sender_full_name": "Stephen Yeager",
        "timestamp": 1606087180
    },
    {
        "content": "<p>Appears to work on a test dataset over here.</p>",
        "id": 21909,
        "sender_full_name": "Elizabeth Maroon",
        "timestamp": 1606087493
    },
    {
        "content": "<p>I'm following up on this old post, as I've tried following along with <span class=\"user-mention\" data-user-id=\"34\">@Stephen Yeager</span> 's method, but getting an outcome I don't understand (it takes a long time to run, and then the output is an array with time=0, size 0. )</p>\n<div class=\"codehilite\"><pre><span></span><code>def djf_mean(ds):\n    # Make a DataArray with the number of days in each month, size = len(time)\n    month_length = ds.time.dt.days_in_month\n\n    result = ((ds * month_length).resample(time=&#39;QS-DEC&#39;).sum() /\n          month_length.resample(time=&#39;QS-DEC&#39;).sum())\n    return result.sel(time=result[&#39;time.month&#39;]==1)\n</code></pre></div>\n<p>I've taken a screenshot of my input array into this function (2m air temp, 1000 years of monthly data), as well as the result after applying the function.  I think the issue arises in the calculation of the numerator, but when I break it down into smaller pieces to test, its not obvious what is going wrong, other than this operation produces an array of size 0 even though both ds and month_length look good:</p>\n<div class=\"codehilite\"><pre><span></span><code>(ds * month_length).resample(time=&#39;QS-DEC&#39;).sum()\n</code></pre></div>\n<p>Thoughts? <a href=\"/user_uploads/2/71/NR7lD95rbSLS_sb8ezXdj-DF/Screen-Shot-2022-12-16-at-3.10.01-PM-2.png\">Screen-Shot-2022-12-16-at-3.10.01-PM-2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/2/71/NR7lD95rbSLS_sb8ezXdj-DF/Screen-Shot-2022-12-16-at-3.10.01-PM-2.png\" title=\"Screen-Shot-2022-12-16-at-3.10.01-PM-2.png\"><img src=\"/user_uploads/2/71/NR7lD95rbSLS_sb8ezXdj-DF/Screen-Shot-2022-12-16-at-3.10.01-PM-2.png\"></a></div>",
        "id": 70687,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1671232275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"259\">@Mira Berdahl</span> since the older post was created, GeoCAT-comp has created some functions that I believe do what you want. Are you looking for climatological seasonal averages across all years of your data or do you want the average for the seasons in each year?</p>",
        "id": 70695,
        "sender_full_name": "Heather Craker",
        "timestamp": 1671466097
    },
    {
        "content": "<p>Depending on what kind of average you want, you can use either <a href=\"https://geocat-comp.readthedocs.io/en/latest/user_api/generated/geocat.comp.climatologies.climatology_average.html#geocat.comp.climatologies.climatology_average\"><code>climatology_average</code></a> or <a href=\"https://geocat-comp.readthedocs.io/en/latest/user_api/generated/geocat.comp.climatologies.calendar_average.html#geocat.comp.climatologies.calendar_average\"><code>calendar_average</code></a>. I've linked to the documentation page for both</p>",
        "id": 70699,
        "sender_full_name": "Heather Craker",
        "timestamp": 1671467929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"107\">@Heather Craker</span> Thanks for the tips on using GeoCAT.  I was looking for the calendar_average method, so that's good to know it exists.  In the meantime, I found my mistake in the function I was trying to use, the last line should read :</p>\n<div class=\"codehilite\"><pre><span></span><code>return result.sel(time=result[&#39;time.moth&#39;]==12)\n</code></pre></div>\n<p>Since I'm looking for DJF instead of JFM average.</p>",
        "id": 70761,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1671475329
    },
    {
        "content": "<p>Great! I'm glad you found a solution! If you need any help with geocat functions, just let me know! You should be able to ping <span class=\"user-group-mention\" data-user-group-id=\"1\">@geocat</span> to get help from any of us on the team</p>",
        "id": 70774,
        "sender_full_name": "Heather Craker",
        "timestamp": 1671475891
    },
    {
        "content": "<p>Hey Steve,</p>\n<p>Is there documentation somewhere about the time='QS-JAN' option to resample? Does this syntax always mean JFM?</p>\n<p>Dave</p>\n<p><span class=\"user-mention silent\" data-user-id=\"34\">Stephen Yeager</span> <a href=\"https://zulip.ucar.edu/#narrow/stream/10-python-questions/topic/xarray.3A.20.20seasonal-mean.20timeseries.20from.20a.20monthly.20timeseries/near/21908\">said</a>:</p>\n<blockquote>\n<p>I came up with the following which seems to work: </p>\n<p><div class=\"codehilite\"><pre><span></span><code>def jfm_mean(ds):\n    month_length = ds.time.dt.days_in_month\n    result = ((ds * month_length).resample(time=&#39;QS-JAN&#39;).sum() /\n          month_length.resample(time=&#39;QS-JAN&#39;).sum())\n    return result.sel(time=result[&#39;time.month&#39;]==1)\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 94893,
        "sender_full_name": "David Bailey",
        "timestamp": 1706128294
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"93\">@David Bailey</span> it's documented with <a href=\"https://xarray.pydata.org/en/v0.8.2/generated/xarray.Dataset.resample.html\"><code>xr.Dataset.resample()</code></a> -- the <code>QS</code> part means \"quarterly\", and the <code>-JAN</code> part means \"starting on January 1\"</p>",
        "id": 94898,
        "sender_full_name": "Michael Levy",
        "timestamp": 1706130077
    },
    {
        "content": "<p>There's a not so obvious (took me a bit to find it a while back, but is really helpful) reference and link to the Pandas time/offset/freq aliases in the xarray.resample docs.  This should help: <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#anchored-offsets\">https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#anchored-offsets</a> and there's more general info on that page.</p>",
        "id": 94899,
        "sender_full_name": "Katelyn FitzGerald",
        "timestamp": 1706130090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"339\">@Katelyn FitzGerald</span> that's far more extensive documentation! So <code>QE-[mon]</code> instead of <code>QS-[mon]</code> would be \"quarterly, ending in [mon]\" (presumably on the ladst of the month?); I was wondering why the <code>S</code> was included in the argument :)</p>",
        "id": 94901,
        "sender_full_name": "Michael Levy",
        "timestamp": 1706130249
    },
    {
        "content": "<p>This is all very helpful. It is still not quite was I was hoping for. So when I do the following:</p>\n<p>month_length = ds1.time.dt.days_in_month<br>\nweights_season = month_length.groupby(seasons) / month_length.groupby(seasons).sum()<br>\nweights_monthly = month_length.groupby(\"time.year\") / month_length.groupby(\"time.year\").sum()</p>\n<p>aice1_seas = (ds1['aice'] * weights_monthly).resample(time=\"QS-JAN\").sum(dim=\"time\")</p>\n<p>I get an array that is 152 x ni x nj where it is 38 years with 4 seasons. I was kind of hoping for a four dimensional array that was 4 x 38 x ni x nj. I had been trying to use groupby, but it produces just 4 time dimensions (seasons) and averages over all the years. I guess I can work with the array and just use the step of 4.</p>",
        "id": 94931,
        "sender_full_name": "David Bailey",
        "timestamp": 1706130839
    },
    {
        "content": "<p>If you're looking to average over the seasons of all years, another option is something like <code>DataArray.groupby(\"time.season\").mean()</code> (maybe this is what you're talking about). </p>\n<p>I'd have to think a bit more about season/year/i/j dim solution.  I think you'd need to reshape/reindex.</p>",
        "id": 95010,
        "sender_full_name": "Katelyn FitzGerald",
        "timestamp": 1706136408
    },
    {
        "content": "<p>Right. I was trying to do that with the weights_season example here, but with custom seasons.</p>\n<p>months = ds1.time.dt.month<br>\nseasons = xr.full_like(months, fill_value=\"none\", dtype=\"U4\")<br>\n<a href=\"http://seasons.name\">seasons.name</a> = \"season\"<br>\nseasons[months.isin([1, 2, 3])] = \"JFM\"<br>\nseasons[months.isin([4, 5, 6])] = \"AMJ\"<br>\nseasons[months.isin([7, 8, 9])] = \"JAS\"<br>\nseasons[months.isin([10, 11, 12])] = \"OND\"</p>\n<p>I think the resample is pretty much what I want.</p>\n<p>Dave</p>",
        "id": 95013,
        "sender_full_name": "David Bailey",
        "timestamp": 1706136558
    }
]