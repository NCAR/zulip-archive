[
    {
        "content": "<p>Hi all,</p>\n<p>I've been using the excellent solution documented <a href=\"https://ncar.github.io/esds/posts/2022/sparse-PFT-gridding/#question\">here</a> to work with 1D output from CLM. This works great when converting from 1D to 4D output, where the dimensions are (time, pft, lat, lon). My question is how to expand this to deal with PFT-level output with more than 4 dimensions. I'm looking at VEGWP, a field with 5 (time, nvegwcs, pft, lat, lon) and so far I've not been able to crowbar the 1D output into an xarray. <br>\nI've tried the following:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\"># extract coordinate index locations</span>\n    <span class=\"n\">ixy</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">pfts1d_ixy</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">jxy</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">pfts1d_jxy</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">nvegwcs</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">VEGWP</span><span class=\"o\">.</span><span class=\"n\">nvegwcs</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"n\">vegtype</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">pfts1d_itype_veg</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">Dataset</span><span class=\"p\">()</span>\n    <span class=\"c1\"># we loop over variables so we can specify the appropriate dtype</span>\n    <span class=\"k\">for</span> <span class=\"n\">var</span> <span class=\"ow\">in</span> <span class=\"n\">pfts</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">apply_ufunc</span><span class=\"p\">(</span>\n            <span class=\"n\">to_sparse</span><span class=\"p\">,</span>\n            <span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">],</span>\n            <span class=\"n\">nvegwcs</span><span class=\"p\">,</span>\n            <span class=\"n\">vegtype</span><span class=\"p\">,</span>\n            <span class=\"n\">jxy</span><span class=\"p\">,</span>\n            <span class=\"n\">ixy</span><span class=\"p\">,</span>\n            <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"shape\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"mi\">116</span><span class=\"p\">)},</span>\n            <span class=\"n\">input_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"n\">output_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"vegtype\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">]],</span>\n            <span class=\"n\">dask</span><span class=\"o\">=</span><span class=\"s2\">\"parallelized\"</span><span class=\"p\">,</span>\n            <span class=\"n\">dask_gufunc_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">COO</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)),</span>\n                <span class=\"n\">output_sizes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s2\">\"vegtype\"</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">:</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">:</span> <span class=\"mi\">116</span><span class=\"p\">},</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">keep_attrs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</code></pre></div>\n<p>but this gives me </p>\n<div class=\"codehilite\"><pre><span></span><code>ValueError: operand to apply_ufunc encountered unexpected dimensions [&#39;nvegwcs&#39;] on an input variable: these are core dimensions on other input or output variables\n</code></pre></div>\n<p>I wondered if anyone else has tried to do this?</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 80900,
        "sender_full_name": "James King",
        "timestamp": 1683900117
    },
    {
        "content": "<p>I bet <code>nvegwcs</code> needs to be a core dimension in <code>input_core_dims</code> for the <code>nvegcws</code> variable</p>",
        "id": 80908,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1683905858
    },
    {
        "content": "<p>Thanks Deepak! I've tried </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">var</span> <span class=\"ow\">in</span> <span class=\"n\">pfts</span><span class=\"p\">:</span>\n        <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">apply_ufunc</span><span class=\"p\">(</span>\n            <span class=\"n\">to_sparse</span><span class=\"p\">,</span>\n            <span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">],</span>\n            <span class=\"n\">nvegwcs</span><span class=\"p\">,</span>\n            <span class=\"n\">vegtype</span><span class=\"p\">,</span>\n            <span class=\"n\">jxy</span><span class=\"p\">,</span>\n            <span class=\"n\">ixy</span><span class=\"p\">,</span>\n            <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"shape\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"mi\">116</span><span class=\"p\">)},</span>\n            <span class=\"n\">input_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n            <span class=\"n\">output_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"vegtype\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">]],</span>\n            <span class=\"n\">dask</span><span class=\"o\">=</span><span class=\"s2\">\"parallelized\"</span><span class=\"p\">,</span>\n            <span class=\"n\">dask_gufunc_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">COO</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)),</span>\n                <span class=\"n\">output_sizes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s2\">\"vegtype\"</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">:</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">:</span> <span class=\"mi\">116</span><span class=\"p\">},</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">keep_attrs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</code></pre></div>\n<p>which gets me:</p>\n<div class=\"codehilite\"><pre><span></span><code>ValueError: operand to apply_ufunc has required core dimensions [&#39;nvegwcs&#39;], but some of these dimensions are absent on an input variable: [&#39;nvegwcs&#39;]\n</code></pre></div>\n<p>I'm wondering if this is happening because nvegwcs doesn't seem to be indexed in the same way as the other dimensions on my input file? Here's the result of printing inputfile.VEGWP:</p>\n<div class=\"codehilite\"><pre><span></span><code>&lt;xarray.DataArray &#39;VEGWP&#39; (time: 1020, nvegwcs: 4, pft: 67373)&gt;\ndask.array&lt;open_dataset-29b908a318577f8a2e4da34f01186702VEGWP, shape=(1020, 4, 67373), dtype=float32, chunksize=(100, 4, 67373), chunktype=numpy.ndarray&gt;\nCoordinates:\n  * time     (time) object 2015-02-01 00:00:00 ... 2100-01-01 00:00:00\nDimensions without coordinates: nvegwcs, pft\n</code></pre></div>",
        "id": 80950,
        "sender_full_name": "James King",
        "timestamp": 1684158792
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"302\">@James King</span> this is an interesting use case. I have not looked at <code>VEGWP</code> output in depth myself. Do you think both <code>nvegwcs</code> and <code>pft</code> need to be listed in <code>input_core_dims</code>?</p>\n<p>Tagging <span class=\"user-mention\" data-user-id=\"120\">@Daniel Kennedy</span> since he may have some insight. This is also a great question to bring up at the CLM science or software engineering meeting, I wonder if anyone else there has encountered this before.</p>",
        "id": 80980,
        "sender_full_name": "Katie Dagon",
        "timestamp": 1684171704
    },
    {
        "content": "<p>Is that error popping up when you are regridding VEGWP or when you are regridding another variable that doesn't have nvegwcs as a dimension? </p>\n<p>On a side note, since it looks like you are doing the same regridding task repeatedly, it might be faster to just explicitly compute the map from 1d-&gt;3d, save it somewhere, and reuse it every time you want to regrid.</p>",
        "id": 80984,
        "sender_full_name": "Daniel Kennedy",
        "timestamp": 1684172511
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">input_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">]]</span> <span class=\"o\">*</span> <span class=\"mi\">5</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>This isn't right. <code>input_core_dims</code> is a list of lists where the inner list is a list of core dimensions for the input variables in order. I tjink you need </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">input_core_dims</span><span class=\"o\">=</span><span class=\"p\">[</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pft\"</span><span class=\"p\">],</span> <span class=\"c1\"># for pfts[var] which I assume is VEGWP</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">],</span> <span class=\"c1\"># for nvegwcs</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">],</span> <span class=\"c1\"># for vegtype</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">],</span> <span class=\"c1\"># for jxy</span>\n    <span class=\"p\">[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">],</span>  <span class=\"c1\"># for ixy</span>\n<span class=\"p\">]</span>\n</code></pre></div>",
        "id": 80990,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684180118
    },
    {
        "content": "<p>For more on <code>apply_ufunc</code> and core dimensions start <a href=\"https://tutorial.xarray.dev/advanced/apply_ufunc/apply_ufunc.html\">here</a></p>",
        "id": 80991,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684180256
    },
    {
        "content": "<p>The <code>[[\"pft\"]] * 5</code> is a shortcut for <code>[ [\"pft\"], [\"pft\"], [\"pft\"], [\"pft\"], [\"pft\"] ]</code></p>",
        "id": 80992,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684180294
    },
    {
        "content": "<p>Thanks a lot for this! Re Daniel's point, the error occurs when attempting to regrid an xarray dataset that contains VEGWP (which has the nvegwcs dimension) as well as other variables which don't have it (e.g. the various pft weights and grid indices). This is supported by the error message I get when I apply Deepak's correction to <code>input_core_dims</code> above:</p>",
        "id": 81001,
        "sender_full_name": "James King",
        "timestamp": 1684235719
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>ValueError: operand to apply_ufunc has required core dimensions [&#39;nvegwcs&#39;, &#39;pft&#39;], but some of these dimensions are absent on an input variable: [&#39;nvegwcs&#39;]\n</code></pre></div>",
        "id": 81002,
        "sender_full_name": "James King",
        "timestamp": 1684235739
    },
    {
        "content": "<p>I'm attending the CLM meeting this week with some science questions related to this work, so I can ask people there if they've come across this problem before - thanks for the suggestion Katie. I vaguely remember that there might be a solution knocking around which uses IDL but that's not something I know much about</p>",
        "id": 81003,
        "sender_full_name": "James King",
        "timestamp": 1684235922
    },
    {
        "content": "<p>sounds like you need to dynamically determine <code>input_core_dims</code> and <code>output_core_dims</code> for each variable inside the loop. This should be straightforward.</p>",
        "id": 81011,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684250525
    },
    {
        "content": "<blockquote>\n<p>I'm looking at VEGWP, a field with 5 (time, nvegwcs, pft, lat, lon) </p>\n</blockquote>\n<p>Ah the core <code>to_sparse</code> function will need some generalization too. It can only handle 3D and 4D output.</p>",
        "id": 81012,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684250878
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span>, I'm sure you have ideas for how to do the generalization, but just in case, <a href=\"https://github.com/NCAR/ctsm_python_gallery/blob/08860973fc6e7cafc654f7a16893bea9a5e2b106/ctsm_py/utils.py#L1013-L1033\">here</a> is how I did it for the (non-sparse) gridding function in utils.py. It loops through the dimensions of the target (gridded) array to build a list of ndarrays, fill_indices, that will be used to fill the target array with the ungridded array. The key bit is appending ellipses for any dimension other than latitude and longitude. (I also have special handling for vegetation type ivt_str, which might not be necessary.)</p>",
        "id": 81016,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1684251515
    },
    {
        "content": "<p>Nice. Is preserving the sparsity not that important?</p>",
        "id": 81019,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684252016
    },
    {
        "content": "<p>The non-sparse method was acceptable for me because I have a beefy laptop, but even so it makes things take a long time. I had never used sparse arrays before, as I was more experienced in MATLAB where (at least when I was first learning) they had too many tradeoffs. However, I think it'd be great to have a generalized sparse function to handle this.</p>",
        "id": 81020,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1684252361
    },
    {
        "content": "<blockquote>\n<p>as I was more experienced in MATLAB where (at least when I was first learning) they had too many tradeoffs. </p>\n</blockquote>\n<p>Reminds me of my thesis! <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> </p>\n<p>These generalized sparse arrays also have tradeoffs (not every operation is supported or efficient) but you can always convert to dense when needed with <code>DataArray.as_numpy</code> and control memory usage that way.</p>\n<blockquote>\n<p>However, I think it'd be great to have a generalized sparse function to handle this.</p>\n</blockquote>\n<p>If you're interested, I'm happy to help a little with this. The core idea is exactly the same: \"figure out the indices where data exists\", except here they get passed to the <code>sparse.COO</code> constructor instead of using them for assigning values in a dense array.</p>",
        "id": 81021,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684252593
    },
    {
        "content": "<p>I don't have the bandwidth to really work on this at the moment, sorry! But I think the solution could be like how you handle time: Just assume that any axis other that lon/lat is totally filled.</p>",
        "id": 81028,
        "sender_full_name": "Sam Rabin",
        "timestamp": 1684253831
    },
    {
        "content": "<p>Thanks all for the suggestions - I'd already had a go at generalising the core <code>to_sparse</code> function but now have a better idea of how to approach it</p>",
        "id": 81106,
        "sender_full_name": "James King",
        "timestamp": 1684336210
    },
    {
        "content": "<p>As an update, I think this works. In the <code>to_sparse</code> function, we add an extra loop to handle data with 3 non-time dimensions:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">vegtype</span><span class=\"p\">,</span>  <span class=\"n\">jxy</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ixy</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"n\">itime</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"c1\"># expand vegtype and friends for all time instants</span>\n        <span class=\"c1\"># by sequentially concatenating each array for each time instants</span>\n        <span class=\"n\">tostack</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">array</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">array</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">vegtype</span><span class=\"p\">,</span>  <span class=\"n\">jxy</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ixy</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">itime</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tostack</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">ndim</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n        <span class=\"n\">itime</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"c1\"># expand vegtype and friends for all time instants</span>\n        <span class=\"c1\"># by sequentially concatenating each array for each time instants</span>\n        <span class=\"n\">tostack</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">concatenate</span><span class=\"p\">([</span><span class=\"n\">array</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">array</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">nvegwcs</span><span class=\"p\">,</span> <span class=\"n\">vegtype</span><span class=\"p\">,</span>  <span class=\"n\">jxy</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ixy</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n        <span class=\"n\">coords</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">([</span><span class=\"n\">itime</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">tostack</span><span class=\"p\">,</span> <span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span>\n</code></pre></div>\n<p>Then, in the <code>convert_pft_variables_to_sparse</code> function, we add a loop to add the additional variables when the extra nvegwcs dimension is present:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">for</span> <span class=\"n\">var</span> <span class=\"ow\">in</span> <span class=\"n\">pfts</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\"nvegwcs\"</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">apply_ufunc</span><span class=\"p\">(</span>\n            <span class=\"n\">to_sparse</span><span class=\"p\">,</span>\n            <span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">],</span>\n            <span class=\"n\">vegtype</span><span class=\"p\">,</span>\n            <span class=\"n\">jxy</span><span class=\"p\">,</span>\n            <span class=\"n\">ixy</span><span class=\"p\">,</span>\n            <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"shape\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"mi\">116</span><span class=\"p\">)},</span>\n            <span class=\"n\">input_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">]]</span><span class=\"o\">*</span><span class=\"mi\">4</span><span class=\"p\">,</span>\n            <span class=\"n\">output_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"vegtype\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">]],</span>\n            <span class=\"n\">dask</span><span class=\"o\">=</span><span class=\"s2\">\"parallelized\"</span><span class=\"p\">,</span>\n            <span class=\"n\">dask_gufunc_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">COO</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)),</span>\n                <span class=\"n\">output_sizes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"vegtype\"</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">:</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">:</span> <span class=\"mi\">116</span><span class=\"p\">},</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">keep_attrs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">\"nvegwcs\"</span> <span class=\"ow\">in</span> <span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dims</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">xr</span><span class=\"o\">.</span><span class=\"n\">apply_ufunc</span><span class=\"p\">(</span>\n            <span class=\"n\">to_sparse</span><span class=\"p\">,</span>\n            <span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">],</span>\n            <span class=\"n\">nvegwcs</span><span class=\"p\">,</span>\n            <span class=\"n\">vegtype</span><span class=\"p\">,</span>\n            <span class=\"n\">jxy</span><span class=\"p\">,</span>\n            <span class=\"n\">ixy</span><span class=\"p\">,</span>\n            <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"shape\"</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"mi\">116</span><span class=\"p\">)},</span>\n            <span class=\"n\">input_core_dims</span><span class=\"o\">=</span><span class=\"p\">[</span>\n            <span class=\"p\">[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pft\"</span><span class=\"p\">],</span> <span class=\"c1\"># for pfts[var] which I assume is VEGWP</span>\n            <span class=\"p\">[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">],</span> <span class=\"c1\"># for nvegwcs</span>\n            <span class=\"p\">[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">],</span> <span class=\"c1\"># for vegtype</span>\n            <span class=\"p\">[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">],</span> <span class=\"c1\"># for jxy</span>\n            <span class=\"p\">[</span><span class=\"s2\">\"pft\"</span><span class=\"p\">]],</span>  <span class=\"c1\"># for ixy</span>\n            <span class=\"n\">output_core_dims</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">,</span> <span class=\"s2\">\"vegtype\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">]],</span>\n            <span class=\"n\">dask</span><span class=\"o\">=</span><span class=\"s2\">\"parallelized\"</span><span class=\"p\">,</span>\n            <span class=\"n\">dask_gufunc_kwargs</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span>\n                <span class=\"n\">meta</span><span class=\"o\">=</span><span class=\"n\">sparse</span><span class=\"o\">.</span><span class=\"n\">COO</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">pfts</span><span class=\"p\">[</span><span class=\"n\">var</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">)),</span>\n                <span class=\"n\">output_sizes</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"nvegwcs\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s2\">\"vegtype\"</span><span class=\"p\">:</span> <span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"s2\">\"lat\"</span><span class=\"p\">:</span> <span class=\"mi\">109</span><span class=\"p\">,</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">:</span> <span class=\"mi\">116</span><span class=\"p\">},</span>\n            <span class=\"p\">),</span>\n            <span class=\"n\">keep_attrs</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</code></pre></div>",
        "id": 81147,
        "sender_full_name": "James King",
        "timestamp": 1684409627
    },
    {
        "content": "<p>Checking the processed output:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">VEGWP</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">vegtype</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>&lt;xarray.DataArray &#39;VEGWP&#39; (time: 1020, nvegwcs: 4, lat: 109, lon: 116)&gt;\ndask.array&lt;getitem, shape=(1020, 4, 109, 116), dtype=float32, chunksize=(100, 4, 109, 116), chunktype=sparse.COO&gt;\nCoordinates:\n  * lat      (lat) float64 -35.01 -34.54 -34.07 -33.6 ... 14.33 14.8 15.27 15.74\n  * lon      (lon) float64 0.0 0.625 1.25 1.875 2.5 ... 357.5 358.1 358.8 359.4\n  * time     (time) object 2015-02-01 00:00:00 ... 2100-01-01 00:00:00\n    vegtype  |S40 b&#39;c4_grass                                &#39;\nDimensions without coordinates: nvegwcs\n</code></pre></div>",
        "id": 81148,
        "sender_full_name": "James King",
        "timestamp": 1684409735
    },
    {
        "content": "<p>However, I get some weird errors when I try to convert the output to a numpy array (which I need for plotting later on in my code):</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">VEGWP</span><span class=\"o\">.</span><span class=\"n\">isel</span><span class=\"p\">(</span><span class=\"n\">vegtype</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span>\n</code></pre></div>\n<div class=\"codehilite\"><pre><span></span><code>Traceback (most recent call last):\n  File &quot;/home/users/j_king25/scripts/plot_1d_array_updated_vegwp.py&quot;, line 264, in &lt;module&gt;\n    print (datab_VEGWP.values)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/xarray/core/dataarray.py&quot;, line 642, in values\n    return self.variable.values\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/xarray/core/variable.py&quot;, line 512, in values\n    return _as_array_or_item(self._data)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/xarray/core/variable.py&quot;, line 252, in _as_array_or_item\n    data = np.asarray(data)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/array/core.py&quot;, line 1689, in __array__\n    x = self.compute()\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/base.py&quot;, line 315, in compute\n    (result,) = compute(self, traverse=False, **kwargs)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/base.py&quot;, line 603, in compute\n    results = schedule(dsk, keys, **kwargs)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/threaded.py&quot;, line 89, in get\n    results = get_async(\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/local.py&quot;, line 511, in get_async\n    raise_exception(exc, tb)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/local.py&quot;, line 319, in reraise\n    raise exc\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/local.py&quot;, line 224, in execute_task\n    result = _execute_task(task, data)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 119, in _execute_task\n    return func(*(_execute_task(a, cache) for a in args))\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 119, in &lt;genexpr&gt;\n    return func(*(_execute_task(a, cache) for a in args))\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 119, in _execute_task\n    return func(*(_execute_task(a, cache) for a in args))\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 119, in &lt;genexpr&gt;\n    return func(*(_execute_task(a, cache) for a in args))\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 119, in _execute_task\n    return func(*(_execute_task(a, cache) for a in args))\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/optimization.py&quot;, line 990, in __call__\n    return core.get(self.dsk, self.outkey, dict(zip(self.inkeys, args)))\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 149, in get\n    result = _execute_task(task, cache)\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/dask/core.py&quot;, line 119, in _execute_task\n    return func(*(_execute_task(a, cache) for a in args))\n  File &quot;/home/users/j_king25/scripts/plot_1d_array_updated_vegwp.py&quot;, line 138, in to_sparse\n    coords = np.stack([itime] + tostack, axis=0)\n  File &quot;&lt;__array_function__ internals&gt;&quot;, line 180, in stack\n  File &quot;/apps/jasmin/jaspy/miniconda_envs/jaspy3.10/m3-4.9.2/envs/jaspy3.10-m3-4.9.2-r20220721/lib/python3.10/site-packages/numpy/core/shape_base.py&quot;, line 426, in stack\n    raise ValueError(&#39;all input arrays must have the same shape&#39;)\nValueError: all input arrays must have the same shape\n</code></pre></div>",
        "id": 81149,
        "sender_full_name": "James King",
        "timestamp": 1684411965
    },
    {
        "content": "<p>Hmm this is tricky to debug without seeing the full code/source data. <span class=\"user-mention\" data-user-id=\"302\">@James King</span> this might also be a good question for <a href=\"https://ncar.github.io/esds/office-hours/\">office hours</a>!</p>",
        "id": 81161,
        "sender_full_name": "Katie Dagon",
        "timestamp": 1684427256
    },
    {
        "content": "<p>I know this is a bit hacky, but you might just turn VEGWP into four 'normal' variables before doing the regridding:</p>\n<div class=\"codehilite\"><pre><span></span><code>for v in ds.nvegwcs.values:\n    ds[&#39;VEGWP&#39;+str(v)]=ds.VEGWP.sel(nvegwcs=v)\nds=ds.drop(&#39;VEGWP&#39;)\n</code></pre></div>\n<p>Then VEGWP0,VEGWP1,... would behave as you are used to</p>",
        "id": 81189,
        "sender_full_name": "Daniel Kennedy",
        "timestamp": 1684446046
    },
    {
        "content": "<p>can you point me to a dataset?</p>",
        "id": 81203,
        "sender_full_name": "Deepak Cherian",
        "timestamp": 1684461763
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120\">@Daniel Kennedy</span>  it's less hacky than what I just posted! I'll try this and see if it improves the outcome</p>",
        "id": 81204,
        "sender_full_name": "James King",
        "timestamp": 1684487055
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"25\">@Deepak Cherian</span> I've put some test data in <code>/glade/work/jamesking/VEGWP/vegwp_merge_test</code>, and the raw output files are in <code>/glade/scratch/jamesking/archive/i.clm5.AfrSSP370_climate_only.004/lnd/hist/i.clm5.AfrSSP370_climate_only.004.clm2.h0*</code><br>\nYou should have access but let me know if you look at them and run into any probems with permissions etc.</p>",
        "id": 81205,
        "sender_full_name": "James King",
        "timestamp": 1684487524
    }
]