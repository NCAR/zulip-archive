[
    {
        "content": "<p>Hi,<br>\nI'm plotting trends I've computed from a variety of CMIP6 models.  They all work fine, except one model (FGOALS) gives me this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>fig, (axs) = plt.subplots(ncols=1, nrows=1, figsize=[5, 5], subplot_kw={&quot;projection&quot;: ccrs.Robinson()})\nFGOALS_g3_histNat_trends.polyfit_coefficients.plot(transform=ccrs.PlateCarree(), cmap=&quot;RdBu_r&quot;, robust=True)\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[132], line 2\n      1 fig, (axs) = plt.subplots(ncols=1, nrows=1, figsize=[5, 5], subplot_kw={&quot;projection&quot;: ccrs.Robinson()})\n----&gt; 2 FGOALS_g3_histNat_trends.polyfit_coefficients.plot(transform=ccrs.PlateCarree(), cmap=&quot;RdBu_r&quot;, robust=True)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/xarray/plot/accessor.py:48, in DataArrayPlotAccessor.__call__(self, **kwargs)\n     46 @functools.wraps(dataarray_plot.plot, assigned=(&quot;__doc__&quot;, &quot;__annotations__&quot;))\n     47 def __call__(self, **kwargs) -&gt; Any:\n---&gt; 48     return dataarray_plot.plot(self._da, **kwargs)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/xarray/plot/dataarray_plot.py:309, in plot(darray, row, col, col_wrap, ax, hue, subplot_kws, **kwargs)\n    305     plotfunc = hist\n    307 kwargs[&quot;ax&quot;] = ax\n--&gt; 309 return plotfunc(darray, **kwargs)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/xarray/plot/dataarray_plot.py:1602, in _plot2d.&lt;locals&gt;.newplotfunc(***failed resolving arguments***)\n   1598     raise ValueError(&quot;plt.imshow&#39;s `aspect` kwarg is not available in xarray&quot;)\n   1600 ax = get_axis(figsize, size, aspect, ax, **subplot_kws)\n-&gt; 1602 primitive = plotfunc(\n   1603     xplt,\n   1604     yplt,\n   1605     zval,\n   1606     ax=ax,\n   1607     cmap=cmap_params[&quot;cmap&quot;],\n   1608     vmin=cmap_params[&quot;vmin&quot;],\n   1609     vmax=cmap_params[&quot;vmax&quot;],\n   1610     norm=cmap_params[&quot;norm&quot;],\n   1611     **kwargs,\n   1612 )\n   1614 # Label the plot with metadata\n   1615 if add_labels:\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/xarray/plot/dataarray_plot.py:2322, in pcolormesh(x, y, z, ax, xscale, yscale, infer_intervals, **kwargs)\n   2319         y = _infer_interval_breaks(y, axis=0, scale=yscale)\n   2321 ax.grid(False)\n-&gt; 2322 primitive = ax.pcolormesh(x, y, z, **kwargs)\n   2324 # by default, pcolormesh picks &quot;round&quot; values for bounds\n   2325 # this results in ugly looking plots with lots of surrounding whitespace\n   2326 if not hasattr(ax, &quot;projection&quot;) and x.ndim == 1 and y.ndim == 1:\n   2327     # not a cartopy geoaxis\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/mpl/geoaxes.py:315, in _add_transform.&lt;locals&gt;.wrapper(self, *args, **kwargs)\n    310     raise ValueError(f&#39;Invalid transform: Spherical {func.__name__} &#39;\n    311                      &#39;is not supported - consider using &#39;\n    312                      &#39;PlateCarree/RotatedPole.&#39;)\n    314 kwargs[&#39;transform&#39;] = transform\n--&gt; 315 return func(self, *args, **kwargs)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/mpl/geoaxes.py:1783, in GeoAxes.pcolormesh(self, *args, **kwargs)\n   1781 result = super().pcolormesh(*args, **kwargs)\n   1782 # Wrap the quadrilaterals if necessary\n-&gt; 1783 result = self._wrap_quadmesh(result, **kwargs)\n   1784 # Re-cast the QuadMesh as a GeoQuadMesh to enable future wrapping\n   1785 # updates to the collection as well.\n   1786 result.__class__ = cartopy.mpl.geocollection.GeoQuadMesh\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/mpl/geoaxes.py:1973, in GeoAxes._wrap_quadmesh(self, collection, **kwargs)\n   1971     pcolor_col.set_array(pcolor_data[mask].ravel())\n   1972 else:\n-&gt; 1973     pcolor_col = self.pcolor(coords[..., 0], coords[..., 1],\n   1974                              pcolor_data, zorder=zorder,\n   1975                              **kwargs)\n   1976     # Currently pcolor_col.get_array() will return a compressed array\n   1977     # and warn unless we explicitly set the 2D array.  This should be\n   1978     # unnecessary with future matplotlib versions.\n   1979     pcolor_col.set_array(pcolor_data)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/mpl/geoaxes.py:315, in _add_transform.&lt;locals&gt;.wrapper(self, *args, **kwargs)\n    310     raise ValueError(f&#39;Invalid transform: Spherical {func.__name__} &#39;\n    311                      &#39;is not supported - consider using &#39;\n    312                      &#39;PlateCarree/RotatedPole.&#39;)\n    314 kwargs[&#39;transform&#39;] = transform\n--&gt; 315 return func(self, *args, **kwargs)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/mpl/geoaxes.py:2012, in GeoAxes.pcolor(self, *args, **kwargs)\n   2009 result = super().pcolor(*args, **kwargs)\n   2011 # Update the datalim for this pcolor.\n-&gt; 2012 limits = result.get_datalim(self.transData)\n   2013 self.update_datalim(limits)\n   2015 self.autoscale_view()\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/matplotlib/collections.py:267, in Collection.get_datalim(self, transData)\n    264     return transforms.Bbox.null()\n    266 if not transform.is_affine:\n--&gt; 267     paths = [transform.transform_path_non_affine(p) for p in paths]\n    268     # Don&#39;t convert transform to transform.get_affine() here because\n    269     # we may have transform.contains_branch(transData) but not\n    270     # transforms.get_affine().contains_branch(transData).  But later,\n    271     # be careful to only apply the affine part that remains.\n    273 offsets = self.get_offsets()\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/matplotlib/collections.py:267, in &lt;listcomp&gt;(.0)\n    264     return transforms.Bbox.null()\n    266 if not transform.is_affine:\n--&gt; 267     paths = [transform.transform_path_non_affine(p) for p in paths]\n    268     # Don&#39;t convert transform to transform.get_affine() here because\n    269     # we may have transform.contains_branch(transData) but not\n    270     # transforms.get_affine().contains_branch(transData).  But later,\n    271     # be careful to only apply the affine part that remains.\n    273 offsets = self.get_offsets()\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/matplotlib/transforms.py:2426, in CompositeGenericTransform.transform_path_non_affine(self, path)\n   2424     return path\n   2425 elif not self._a.is_affine and self._b.is_affine:\n-&gt; 2426     return self._a.transform_path_non_affine(path)\n   2427 else:\n   2428     return self._b.transform_path_non_affine(\n   2429                             self._a.transform_path(path))\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/mpl/geoaxes.py:186, in InterProjectionTransform.transform_path_non_affine(self, src_path)\n    182 geoms = cpatch.path_to_geos(src_path,\n    183                             getattr(self, &#39;force_path_ccw&#39;, False))\n    185 for geom in geoms:\n--&gt; 186     proj_geom = self.target_projection.project_geometry(\n    187         geom, self.source_projection)\n    188     transformed_geoms.append(proj_geom)\n    190 if not transformed_geoms:\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/crs.py:817, in Projection.project_geometry(self, geometry, src_crs)\n    815 if not method_name:\n    816     raise ValueError(f&#39;Unsupported geometry type {geom_type!r}&#39;)\n--&gt; 817 return getattr(self, method_name)(geometry, src_crs)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/crs.py:972, in Projection._project_polygon(self, polygon, src_crs)\n    968     rings.extend(self._attach_lines_to_boundary(multi_lines, is_ccw))\n    970 # Resolve all the inside vs. outside rings, and convert to the\n    971 # final MultiPolygon.\n--&gt; 972 return self._rings_to_multi_polygon(rings, is_ccw)\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/cartopy/crs.py:1233, in Projection._rings_to_multi_polygon(self, rings, is_ccw)\n   1230                 polygon_bits.append(polygon)\n   1232 if polygon_bits:\n-&gt; 1233     multi_poly = sgeom.MultiPolygon(polygon_bits)\n   1234 else:\n   1235     multi_poly = sgeom.MultiPolygon()\n\nFile /glade/work/mberdahl/miniconda/envs/NPL_forCloud/lib/python3.11/site-packages/shapely/geometry/multipolygon.py:79, in MultiPolygon.__new__(self, polygons)\n     77 ob = polygons[i]\n     78 if not isinstance(ob, polygon.Polygon):\n---&gt; 79     shell = ob[0]\n     80     if len(ob) &gt; 1:\n     81         holes = ob[1]\n\nTypeError: &#39;GeometryCollection&#39; object is not subscriptable\n</code></pre></div>\n<p>It appears to be triggered when including transform=ccrs.PlateCarree().</p>",
        "id": 98809,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1714775966
    },
    {
        "content": "<p>This looks like this might be a bug in Cartopy.  There's a suggested workaround in this <a href=\"https://github.com/SciTools/cartopy/issues/2176\">issue on GitHub</a>.  I'd give that a try.</p>",
        "id": 98810,
        "sender_full_name": "Katelyn FitzGerald",
        "timestamp": 1714778373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"339\">Katelyn FitzGerald</span> <a href=\"#narrow/stream/3-general/topic/FGOALS.20model.20throws.20error.20when.20trying.20to.20use.20projection/near/98810\">said</a>:</p>\n<blockquote>\n<p>This looks like this might be a bug in Cartopy.  There's a suggested workaround in this <a href=\"https://github.com/SciTools/cartopy/issues/2176\">issue on GitHub</a>.  I'd give that a try.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"339\">@Katelyn FitzGerald</span> thanks. Unfortunately, it appears that the recommendation to use the transform_first argument is only for contouring. I get the error: </p>\n<div class=\"codehilite\"><pre><span></span><code>QuadMesh.set() got an unexpected keyword argument &#39;transform_first&#39;\n</code></pre></div>",
        "id": 98813,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1714782438
    },
    {
        "content": "<p>Bummer, I was worried that may be the case.  </p>\n<p>If you want to point me to the script / notebook, I can try to take a deeper look next week.</p>",
        "id": 98814,
        "sender_full_name": "Katelyn FitzGerald",
        "timestamp": 1714783004
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"339\">Katelyn FitzGerald</span> <a href=\"#narrow/stream/3-general/topic/FGOALS.20model.20throws.20error.20when.20trying.20to.20use.20projection/near/98814\">said</a>:</p>\n<blockquote>\n<p>Bummer, I was worried that may be the case.  </p>\n<p>If you want to point me to the script / notebook, I can try to take a deeper look next week.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"339\">@Katelyn FitzGerald</span> , thanks that would be great!</p>\n<p>You can take a look at my notebook here:<br>\n/glade/u/home/mberdahl/Gerard/Hist/NorESM/ExptWithDataTrees-Copy1.ipynb</p>\n<p>Thanks!</p>",
        "id": 98824,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1714851492
    },
    {
        "content": "<p>It's not a good long term fix, but downgrading shapely&lt;2.0  should fix your problem for now.  You can do something like <code>conda install 'shapely&lt;2'</code> to update your environment.  </p>\n<p>It looks like something in the last major version release of shapely broke things in Cartopy that have yet to be been fixed.  I'll add some additional notes to the related issue on Cartopy's GitHub repository.</p>",
        "id": 98832,
        "sender_full_name": "Katelyn FitzGerald",
        "timestamp": 1715020698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"339\">Katelyn FitzGerald</span> <a href=\"#narrow/stream/3-general/topic/FGOALS.20model.20throws.20error.20when.20trying.20to.20use.20projection/near/98832\">said</a>:</p>\n<blockquote>\n<p>It's not a good long term fix, but downgrading shapely&lt;2.0  should fix your problem for now.  You can do something like <code>conda install 'shapely&lt;2'</code> to update your environment.  </p>\n<p>It looks like something in the last major version release of shapely broke things in Cartopy that have yet to be been fixed.  I'll add some additional notes to the related issue on Cartopy's GitHub repository.</p>\n</blockquote>\n<p>Thanks for looking into this. I tried to downgrade shapely, but ran into a compatibility issue. </p>\n<div class=\"codehilite\"><pre><span></span><code>Could not solve for environment specs\nThe following packages are incompatible\n├─ geos 3.12.0.*  is requested and can be installed;\n├─ pin-1 is installable and it requires\n│  └─ python 3.11.* , which can be installed;\n└─ shapely &lt;2  is not installable because there are no viable options\n   ├─ shapely [1.5.13|1.5.15|1.5.16|1.6.4|1.7.0] would require\n   │  └─ python [2.7* |&gt;=2.7,&lt;2.8.0a0 ], which conflicts with any installable versions previously reported;\n   ├─ shapely [1.5.13|1.5.15|1.5.16] would require\n   │  └─ python 3.4* , which conflicts with any installable versions previously reported;\n   ├─ shapely [1.5.13|1.5.15|1.5.16] would require\n   │  └─ python 3.5* , which conflicts with any installable versions previously reported;\n   ├─ shapely [1.5.16|1.5.17] would require\n   │  └─ geos 3.4.* , which does not exist (perhaps a missing channel);\n   ├─ shapely 1.5.17 would require\n   │  └─ geos 3.5.* , which does not exist (perhaps a missing channel);\n   ├─ shapely [1.5.17|1.6.0|1.6.1|1.6.2] would require\n   │  └─ geos 3.5.1 , which does not exist (perhaps a missing channel);\n   ├─ shapely [1.6.2|1.6.3|1.6.4] would require\n   │  └─ geos 3.6.2 , which does not exist (perhaps a missing channel);\n   ├─ shapely 1.6.4 would require\n   │  └─ geos &gt;=3.6.2,&lt;3.6.3.0a0 , which does not exist (perhaps a missing channel);\n   ├─ shapely [1.6.4|1.7.0|1.7.1] would require\n   │  └─ python &gt;=3.6,&lt;3.7.0a0 , which conflicts with any installable versions previously reported;\n   ├─ shapely [1.6.4|1.7.0|...|1.8.5] would require\n   │  └─ python &gt;=3.7,&lt;3.8.0a0 , which conflicts with any installable versions previously reported;\n   ├─ shapely [1.6.4|1.7.0|...|1.8.5] would require\n   │  └─ python &gt;=3.8,&lt;3.9.0a0 , which conflicts with any installable versions previously reported;\n   ├─ shapely [1.7.1|1.8.0|...|1.8.5] would require\n   │  └─ python &gt;=3.9,&lt;3.10.0a0 , which conflicts with any installable versions previously reported;\n   ├─ shapely [1.8.0|1.8.1|...|1.8.5] would require\n   │  └─ python &gt;=3.10,&lt;3.11.0a0 , which conflicts with any installable versions previously reported;\n   ├─ shapely 1.8.5 would require\n   │  └─ geos &gt;=3.11.1,&lt;3.11.2.0a0 , which conflicts with any installable versions previously reported;\n   └─ shapely 1.8.5 would require\n      └─ geos &gt;=3.11.0,&lt;3.11.1.0a0 , which conflicts with any installable versions previously reported.\n</code></pre></div>",
        "id": 98833,
        "sender_full_name": "Mira Berdahl",
        "timestamp": 1715021735
    }
]